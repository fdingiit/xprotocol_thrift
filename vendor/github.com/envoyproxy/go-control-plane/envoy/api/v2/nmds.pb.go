// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/nmds.proto

package envoy_api_v2

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PodInfo_PodPhase int32

const (
	PodInfo_UNKNOWN   PodInfo_PodPhase = 0
	PodInfo_PENDING   PodInfo_PodPhase = 1
	PodInfo_RUNNING   PodInfo_PodPhase = 2
	PodInfo_SUCCEEDED PodInfo_PodPhase = 3
	PodInfo_FAILED    PodInfo_PodPhase = 4
)

var PodInfo_PodPhase_name = map[int32]string{
	0: "UNKNOWN",
	1: "PENDING",
	2: "RUNNING",
	3: "SUCCEEDED",
	4: "FAILED",
}

var PodInfo_PodPhase_value = map[string]int32{
	"UNKNOWN":   0,
	"PENDING":   1,
	"RUNNING":   2,
	"SUCCEEDED": 3,
	"FAILED":    4,
}

func (x PodInfo_PodPhase) String() string {
	return proto.EnumName(PodInfo_PodPhase_name, int32(x))
}

func (PodInfo_PodPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cae9584173e69ff6, []int{1, 0}
}

type NodeSentryMapping struct {
	InstanceIp           string     `protobuf:"bytes,1,opt,name=instance_ip,json=instanceIp,proto3" json:"instance_ip,omitempty"`
	NodeIp               string     `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	ClusterName          string     `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	PodList              []*PodInfo `protobuf:"bytes,4,rep,name=pod_list,json=podList,proto3" json:"pod_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NodeSentryMapping) Reset()         { *m = NodeSentryMapping{} }
func (m *NodeSentryMapping) String() string { return proto.CompactTextString(m) }
func (*NodeSentryMapping) ProtoMessage()    {}
func (*NodeSentryMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae9584173e69ff6, []int{0}
}

func (m *NodeSentryMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeSentryMapping.Unmarshal(m, b)
}
func (m *NodeSentryMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeSentryMapping.Marshal(b, m, deterministic)
}
func (m *NodeSentryMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSentryMapping.Merge(m, src)
}
func (m *NodeSentryMapping) XXX_Size() int {
	return xxx_messageInfo_NodeSentryMapping.Size(m)
}
func (m *NodeSentryMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSentryMapping.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSentryMapping proto.InternalMessageInfo

func (m *NodeSentryMapping) GetInstanceIp() string {
	if m != nil {
		return m.InstanceIp
	}
	return ""
}

func (m *NodeSentryMapping) GetNodeIp() string {
	if m != nil {
		return m.NodeIp
	}
	return ""
}

func (m *NodeSentryMapping) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *NodeSentryMapping) GetPodList() []*PodInfo {
	if m != nil {
		return m.PodList
	}
	return nil
}

type PodInfo struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string           `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	InstanceIp           string           `protobuf:"bytes,3,opt,name=instance_ip,json=instanceIp,proto3" json:"instance_ip,omitempty"`
	Phase                PodInfo_PodPhase `protobuf:"varint,4,opt,name=phase,proto3,enum=envoy.api.v2.PodInfo_PodPhase" json:"phase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PodInfo) Reset()         { *m = PodInfo{} }
func (m *PodInfo) String() string { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()    {}
func (*PodInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cae9584173e69ff6, []int{1}
}

func (m *PodInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodInfo.Unmarshal(m, b)
}
func (m *PodInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodInfo.Marshal(b, m, deterministic)
}
func (m *PodInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodInfo.Merge(m, src)
}
func (m *PodInfo) XXX_Size() int {
	return xxx_messageInfo_PodInfo.Size(m)
}
func (m *PodInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PodInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PodInfo proto.InternalMessageInfo

func (m *PodInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodInfo) GetInstanceIp() string {
	if m != nil {
		return m.InstanceIp
	}
	return ""
}

func (m *PodInfo) GetPhase() PodInfo_PodPhase {
	if m != nil {
		return m.Phase
	}
	return PodInfo_UNKNOWN
}

func init() {
	proto.RegisterEnum("envoy.api.v2.PodInfo_PodPhase", PodInfo_PodPhase_name, PodInfo_PodPhase_value)
	proto.RegisterType((*NodeSentryMapping)(nil), "envoy.api.v2.NodeSentryMapping")
	proto.RegisterType((*PodInfo)(nil), "envoy.api.v2.PodInfo")
}

func init() { proto.RegisterFile("envoy/api/v2/nmds.proto", fileDescriptor_cae9584173e69ff6) }

var fileDescriptor_cae9584173e69ff6 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xd1, 0x8e, 0x12, 0x31,
	0x18, 0x85, 0xed, 0x82, 0xb0, 0xfc, 0xac, 0x06, 0x9b, 0x18, 0x90, 0x90, 0x15, 0xb9, 0xe2, 0xc2,
	0xcc, 0x18, 0xf4, 0x05, 0xdc, 0x65, 0x34, 0x13, 0xb1, 0x4e, 0xd8, 0x10, 0x2f, 0x49, 0x97, 0x76,
	0xb1, 0x09, 0xb4, 0x4d, 0xdb, 0x19, 0x9d, 0x37, 0xf0, 0x39, 0x7c, 0x32, 0x1f, 0xc5, 0xb4, 0x33,
	0x13, 0x15, 0xdd, 0xab, 0xf6, 0x9c, 0xef, 0x74, 0x7a, 0x3a, 0x3f, 0x0c, 0xb9, 0x2c, 0x54, 0x19,
	0x53, 0x2d, 0xe2, 0x62, 0x11, 0xcb, 0x23, 0xb3, 0x91, 0x36, 0xca, 0x29, 0x7c, 0x11, 0x40, 0x44,
	0xb5, 0x88, 0x8a, 0xc5, 0x78, 0xb2, 0x57, 0x6a, 0x7f, 0xe0, 0x21, 0x47, 0xa5, 0x54, 0x8e, 0x3a,
	0xa1, 0x64, 0x9d, 0x1d, 0x3f, 0xab, 0x69, 0x50, 0xb7, 0xf9, 0x5d, 0x4c, 0x65, 0x59, 0xa3, 0xcb,
	0x53, 0xc4, 0x72, 0x13, 0xce, 0xd6, 0x7c, 0x72, 0xca, 0xad, 0x33, 0xf9, 0xce, 0xdd, 0x77, 0xfa,
	0xab, 0xa1, 0x5a, 0x73, 0xd3, 0x5c, 0x3c, 0x2c, 0xe8, 0x41, 0x30, 0xea, 0x78, 0xdc, 0x6c, 0x2a,
	0x30, 0xfb, 0x81, 0xe0, 0x09, 0x51, 0x8c, 0xdf, 0x70, 0xe9, 0x4c, 0xf9, 0x91, 0x6a, 0x2d, 0xe4,
	0x1e, 0x3f, 0x87, 0xbe, 0x90, 0xd6, 0x51, 0xb9, 0xe3, 0x5b, 0xa1, 0x47, 0x68, 0x8a, 0xe6, 0xbd,
	0x35, 0x34, 0x56, 0xaa, 0xf1, 0x10, 0xba, 0x52, 0xb1, 0x00, 0xcf, 0x02, 0xec, 0x78, 0x99, 0x6a,
	0xfc, 0x02, 0x2e, 0x76, 0x87, 0xdc, 0x3a, 0x6e, 0xb6, 0x92, 0x1e, 0xf9, 0xa8, 0x15, 0x68, 0xbf,
	0xf6, 0x08, 0x3d, 0x72, 0xfc, 0x0a, 0xce, 0xb5, 0x62, 0xdb, 0x83, 0xb0, 0x6e, 0xd4, 0x9e, 0xb6,
	0xe6, 0xfd, 0xc5, 0xd3, 0xe8, 0xcf, 0x7f, 0x18, 0x65, 0x8a, 0xa5, 0xf2, 0x4e, 0xad, 0xbb, 0x5a,
	0xb1, 0x95, 0xb0, 0x6e, 0xf6, 0x13, 0x41, 0xb7, 0x36, 0x31, 0x86, 0x76, 0xf8, 0x70, 0xd5, 0x29,
	0xec, 0xf1, 0x04, 0x7a, 0x7e, 0xb5, 0x9a, 0xee, 0x78, 0xdd, 0xe7, 0xb7, 0x71, 0xfa, 0x98, 0xd6,
	0x3f, 0x8f, 0x79, 0x03, 0x0f, 0xf5, 0x17, 0x6a, 0xf9, 0xa8, 0x3d, 0x45, 0xf3, 0xc7, 0x8b, 0xcb,
	0xff, 0xb6, 0xf1, 0x6b, 0xe6, 0x53, 0xeb, 0x2a, 0x3c, 0x5b, 0xc1, 0x79, 0x63, 0xe1, 0x3e, 0x74,
	0x37, 0xe4, 0x03, 0xf9, 0xf4, 0x99, 0x0c, 0x1e, 0x78, 0x91, 0x25, 0x64, 0x99, 0x92, 0xf7, 0x03,
	0xe4, 0xc5, 0x7a, 0x43, 0x88, 0x17, 0x67, 0xf8, 0x11, 0xf4, 0x6e, 0x36, 0xd7, 0xd7, 0x49, 0xb2,
	0x4c, 0x96, 0x83, 0x16, 0x06, 0xe8, 0xbc, 0x7b, 0x9b, 0xae, 0x92, 0xe5, 0xa0, 0x7d, 0xf5, 0x12,
	0xc6, 0x42, 0x55, 0x17, 0x6b, 0xa3, 0xbe, 0x95, 0x7f, 0x75, 0xb8, 0xea, 0x91, 0x23, 0xb3, 0x99,
	0x1f, 0x58, 0x86, 0xbe, 0x23, 0x74, 0xdb, 0x09, 0xc3, 0x7b, 0xfd, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0x6a, 0xa8, 0xf4, 0x90, 0x95, 0x02, 0x00, 0x00,
}
