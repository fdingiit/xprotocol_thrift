// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/config/filter/network/x_proxy/v2/x_proxy.proto

package v2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _x_proxy_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on XProxy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *XProxy) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetXProtocol()) < 1 {
		return XProxyValidationError{
			field:  "XProtocol",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetStatPrefix()) < 1 {
		return XProxyValidationError{
			field:  "StatPrefix",
			reason: "value length must be at least 1 bytes",
		}
	}

	if _, ok := XProxy_CodecType_name[int32(m.GetDownstreamProtocol())]; !ok {
		return XProxyValidationError{
			field:  "DownstreamProtocol",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := XProxy_CodecType_name[int32(m.GetUpstreamProtocol())]; !ok {
		return XProxyValidationError{
			field:  "UpstreamProtocol",
			reason: "value must be one of the defined enum values",
		}
	}

	for idx, item := range m.GetStreamFilters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XProxyValidationError{
					field:  fmt.Sprintf("StreamFilters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetTracing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "Tracing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ServerName

	if v, ok := interface{}(m.GetIdleTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "IdleTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStreamIdleTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "StreamIdleTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRequestTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "RequestTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDrainTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "DrainTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAccessLog() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XProxyValidationError{
					field:  fmt.Sprintf("AccessLog[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetUseRemoteAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "UseRemoteAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGenerateRequestId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "GenerateRequestId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := XProxy_ForwardClientCertDetails_name[int32(m.GetForwardClientCertDetails())]; !ok {
		return XProxyValidationError{
			field:  "ForwardClientCertDetails",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetSetCurrentClientCertDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "SetCurrentClientCertDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RepresentIpv4RemoteAddressAsIpv4MappedIpv6

	if v, ok := interface{}(m.GetInternalAddressConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "InternalAddressConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDelayedCloseTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxyValidationError{
				field:  "DelayedCloseTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.RouteSpecifier.(type) {

	case *XProxy_Rds:

		if v, ok := interface{}(m.GetRds()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XProxyValidationError{
					field:  "Rds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *XProxy_RouteConfig:

		if v, ok := interface{}(m.GetRouteConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XProxyValidationError{
					field:  "RouteConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return XProxyValidationError{
			field:  "RouteSpecifier",
			reason: "value is required",
		}

	}

	return nil
}

// XProxyValidationError is the validation error returned by XProxy.Validate if
// the designated constraints aren't met.
type XProxyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XProxyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XProxyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XProxyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XProxyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XProxyValidationError) ErrorName() string { return "XProxyValidationError" }

// Error satisfies the builtin error interface
func (e XProxyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXProxy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XProxyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XProxyValidationError{}

// Validate checks the field values on Rds with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rds) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetConfigSource() == nil {
		return RdsValidationError{
			field:  "ConfigSource",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetConfigSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RdsValidationError{
				field:  "ConfigSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetRouteConfigName()) < 1 {
		return RdsValidationError{
			field:  "RouteConfigName",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// RdsValidationError is the validation error returned by Rds.Validate if the
// designated constraints aren't met.
type RdsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RdsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RdsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RdsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RdsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RdsValidationError) ErrorName() string { return "RdsValidationError" }

// Error satisfies the builtin error interface
func (e RdsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RdsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RdsValidationError{}

// Validate checks the field values on StreamFilter with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StreamFilter) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetName()) < 1 {
		return StreamFilterValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	switch m.ConfigType.(type) {

	case *StreamFilter_Config:

		if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamFilterValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamFilter_TypedConfig:

		if v, ok := interface{}(m.GetTypedConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamFilterValidationError{
					field:  "TypedConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// StreamFilterValidationError is the validation error returned by
// StreamFilter.Validate if the designated constraints aren't met.
type StreamFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamFilterValidationError) ErrorName() string { return "StreamFilterValidationError" }

// Error satisfies the builtin error interface
func (e StreamFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamFilterValidationError{}

// Validate checks the field values on XProxy_Tracing with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *XProxy_Tracing) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := XProxy_Tracing_OperationName_name[int32(m.GetOperationName())]; !ok {
		return XProxy_TracingValidationError{
			field:  "OperationName",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetClientSampling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxy_TracingValidationError{
				field:  "ClientSampling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRandomSampling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxy_TracingValidationError{
				field:  "RandomSampling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOverallSampling()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxy_TracingValidationError{
				field:  "OverallSampling",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Verbose

	return nil
}

// XProxy_TracingValidationError is the validation error returned by
// XProxy_Tracing.Validate if the designated constraints aren't met.
type XProxy_TracingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XProxy_TracingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XProxy_TracingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XProxy_TracingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XProxy_TracingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XProxy_TracingValidationError) ErrorName() string { return "XProxy_TracingValidationError" }

// Error satisfies the builtin error interface
func (e XProxy_TracingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXProxy_Tracing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XProxy_TracingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XProxy_TracingValidationError{}

// Validate checks the field values on XProxy_SetCurrentClientCertDetails with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *XProxy_SetCurrentClientCertDetails) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XProxy_SetCurrentClientCertDetailsValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cert

	// no validation rules for Dns

	// no validation rules for Uri

	return nil
}

// XProxy_SetCurrentClientCertDetailsValidationError is the validation error
// returned by XProxy_SetCurrentClientCertDetails.Validate if the designated
// constraints aren't met.
type XProxy_SetCurrentClientCertDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XProxy_SetCurrentClientCertDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XProxy_SetCurrentClientCertDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XProxy_SetCurrentClientCertDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XProxy_SetCurrentClientCertDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XProxy_SetCurrentClientCertDetailsValidationError) ErrorName() string {
	return "XProxy_SetCurrentClientCertDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e XProxy_SetCurrentClientCertDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXProxy_SetCurrentClientCertDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XProxy_SetCurrentClientCertDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XProxy_SetCurrentClientCertDetailsValidationError{}

// Validate checks the field values on XProxy_InternalAddressConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *XProxy_InternalAddressConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UnixSockets

	return nil
}

// XProxy_InternalAddressConfigValidationError is the validation error returned
// by XProxy_InternalAddressConfig.Validate if the designated constraints
// aren't met.
type XProxy_InternalAddressConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XProxy_InternalAddressConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XProxy_InternalAddressConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XProxy_InternalAddressConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XProxy_InternalAddressConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XProxy_InternalAddressConfigValidationError) ErrorName() string {
	return "XProxy_InternalAddressConfigValidationError"
}

// Error satisfies the builtin error interface
func (e XProxy_InternalAddressConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXProxy_InternalAddressConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XProxy_InternalAddressConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XProxy_InternalAddressConfigValidationError{}
