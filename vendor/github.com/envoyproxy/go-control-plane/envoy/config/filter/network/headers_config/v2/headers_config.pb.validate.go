// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/config/filter/network/headers_config/v2/headers_config.proto

package v2alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _headers_config_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on HeadersConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HeadersConfig) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HeadersConfigValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HeadersConfigValidationError is the validation error returned by
// HeadersConfig.Validate if the designated constraints aren't met.
type HeadersConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeadersConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeadersConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeadersConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeadersConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeadersConfigValidationError) ErrorName() string { return "HeadersConfigValidationError" }

// Error satisfies the builtin error interface
func (e HeadersConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeadersConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeadersConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeadersConfigValidationError{}

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Config) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSofas() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Sofas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on SofaHeadersRule with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SofaHeadersRule) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SofaHeadersRuleValidationError{
					field:  fmt.Sprintf("Match[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SofaHeadersRuleValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SofaHeadersRuleValidationError is the validation error returned by
// SofaHeadersRule.Validate if the designated constraints aren't met.
type SofaHeadersRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SofaHeadersRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SofaHeadersRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SofaHeadersRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SofaHeadersRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SofaHeadersRuleValidationError) ErrorName() string { return "SofaHeadersRuleValidationError" }

// Error satisfies the builtin error interface
func (e SofaHeadersRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSofaHeadersRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SofaHeadersRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SofaHeadersRuleValidationError{}

// Validate checks the field values on MatchRequirement with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MatchRequirement) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ref

	// no validation rules for Key

	// no validation rules for Operator

	return nil
}

// MatchRequirementValidationError is the validation error returned by
// MatchRequirement.Validate if the designated constraints aren't met.
type MatchRequirementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchRequirementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchRequirementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchRequirementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchRequirementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchRequirementValidationError) ErrorName() string { return "MatchRequirementValidationError" }

// Error satisfies the builtin error interface
func (e MatchRequirementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchRequirement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchRequirementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchRequirementValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetWeight()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionValidationError{
				field:  "Weight",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRequestHeadersToAdd() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  fmt.Sprintf("RequestHeadersToAdd[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResponseHeadersToAdd() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionValidationError{
					field:  fmt.Sprintf("ResponseHeadersToAdd[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}
