// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/network/x_proxy/v2/x_proxy.proto

package v2

import (
	fmt "fmt"
	v2 "github.com/envoyproxy/go-control-plane/envoy/api/v2"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	v21 "github.com/envoyproxy/go-control-plane/envoy/config/filter/accesslog/v2"
	_type "github.com/envoyproxy/go-control-plane/envoy/type"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type XProxy_CodecType int32

const (
	XProxy_X     XProxy_CodecType = 0
	XProxy_HTTP2 XProxy_CodecType = 1
)

var XProxy_CodecType_name = map[int32]string{
	0: "X",
	1: "HTTP2",
}

var XProxy_CodecType_value = map[string]int32{
	"X":     0,
	"HTTP2": 1,
}

func (x XProxy_CodecType) String() string {
	return proto.EnumName(XProxy_CodecType_name, int32(x))
}

func (XProxy_CodecType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2681867d75fbe2e8, []int{0, 0}
}

type XProxy_ForwardClientCertDetails int32

const (
	XProxy_SANITIZE            XProxy_ForwardClientCertDetails = 0
	XProxy_FORWARD_ONLY        XProxy_ForwardClientCertDetails = 1
	XProxy_APPEND_FORWARD      XProxy_ForwardClientCertDetails = 2
	XProxy_SANITIZE_SET        XProxy_ForwardClientCertDetails = 3
	XProxy_ALWAYS_FORWARD_ONLY XProxy_ForwardClientCertDetails = 4
)

var XProxy_ForwardClientCertDetails_name = map[int32]string{
	0: "SANITIZE",
	1: "FORWARD_ONLY",
	2: "APPEND_FORWARD",
	3: "SANITIZE_SET",
	4: "ALWAYS_FORWARD_ONLY",
}

var XProxy_ForwardClientCertDetails_value = map[string]int32{
	"SANITIZE":            0,
	"FORWARD_ONLY":        1,
	"APPEND_FORWARD":      2,
	"SANITIZE_SET":        3,
	"ALWAYS_FORWARD_ONLY": 4,
}

func (x XProxy_ForwardClientCertDetails) String() string {
	return proto.EnumName(XProxy_ForwardClientCertDetails_name, int32(x))
}

func (XProxy_ForwardClientCertDetails) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2681867d75fbe2e8, []int{0, 1}
}

type XProxy_Tracing_OperationName int32

const (
	XProxy_Tracing_INGRESS XProxy_Tracing_OperationName = 0
	XProxy_Tracing_EGRESS  XProxy_Tracing_OperationName = 1
)

var XProxy_Tracing_OperationName_name = map[int32]string{
	0: "INGRESS",
	1: "EGRESS",
}

var XProxy_Tracing_OperationName_value = map[string]int32{
	"INGRESS": 0,
	"EGRESS":  1,
}

func (x XProxy_Tracing_OperationName) String() string {
	return proto.EnumName(XProxy_Tracing_OperationName_name, int32(x))
}

func (XProxy_Tracing_OperationName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2681867d75fbe2e8, []int{0, 0, 0}
}

type XProxy struct {
	XProtocol  string `protobuf:"bytes,1,opt,name=x_protocol,json=xProtocol,proto3" json:"x_protocol,omitempty"`
	StatPrefix string `protobuf:"bytes,2,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// Types that are valid to be assigned to RouteSpecifier:
	//	*XProxy_Rds
	//	*XProxy_RouteConfig
	RouteSpecifier                             isXProxy_RouteSpecifier             `protobuf_oneof:"route_specifier"`
	DownstreamProtocol                         XProxy_CodecType                    `protobuf:"varint,5,opt,name=downstream_protocol,json=downstreamProtocol,proto3,enum=envoy.config.filter.network.x_proxy.v2.XProxy_CodecType" json:"downstream_protocol,omitempty"`
	UpstreamProtocol                           XProxy_CodecType                    `protobuf:"varint,6,opt,name=upstream_protocol,json=upstreamProtocol,proto3,enum=envoy.config.filter.network.x_proxy.v2.XProxy_CodecType" json:"upstream_protocol,omitempty"`
	StreamFilters                              []*StreamFilter                     `protobuf:"bytes,7,rep,name=stream_filters,json=streamFilters,proto3" json:"stream_filters,omitempty"`
	MetasToAddToHeader                         []string                            `protobuf:"bytes,8,rep,name=metas_to_add_to_header,json=metasToAddToHeader,proto3" json:"metas_to_add_to_header,omitempty"`
	Tracing                                    *XProxy_Tracing                     `protobuf:"bytes,9,opt,name=tracing,proto3" json:"tracing,omitempty"`
	ServerName                                 string                              `protobuf:"bytes,10,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	IdleTimeout                                *duration.Duration                  `protobuf:"bytes,11,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	StreamIdleTimeout                          *duration.Duration                  `protobuf:"bytes,12,opt,name=stream_idle_timeout,json=streamIdleTimeout,proto3" json:"stream_idle_timeout,omitempty"`
	RequestTimeout                             *duration.Duration                  `protobuf:"bytes,13,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	DrainTimeout                               *duration.Duration                  `protobuf:"bytes,14,opt,name=drain_timeout,json=drainTimeout,proto3" json:"drain_timeout,omitempty"`
	AccessLog                                  []*v21.AccessLog                    `protobuf:"bytes,15,rep,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	UseRemoteAddress                           *wrappers.BoolValue                 `protobuf:"bytes,16,opt,name=use_remote_address,json=useRemoteAddress,proto3" json:"use_remote_address,omitempty"`
	GenerateRequestId                          *wrappers.BoolValue                 `protobuf:"bytes,17,opt,name=generate_request_id,json=generateRequestId,proto3" json:"generate_request_id,omitempty"`
	ForwardClientCertDetails                   XProxy_ForwardClientCertDetails     `protobuf:"varint,18,opt,name=forward_client_cert_details,json=forwardClientCertDetails,proto3,enum=envoy.config.filter.network.x_proxy.v2.XProxy_ForwardClientCertDetails" json:"forward_client_cert_details,omitempty"`
	SetCurrentClientCertDetails                *XProxy_SetCurrentClientCertDetails `protobuf:"bytes,19,opt,name=set_current_client_cert_details,json=setCurrentClientCertDetails,proto3" json:"set_current_client_cert_details,omitempty"`
	RepresentIpv4RemoteAddressAsIpv4MappedIpv6 bool                                `protobuf:"varint,20,opt,name=represent_ipv4_remote_address_as_ipv4_mapped_ipv6,json=representIpv4RemoteAddressAsIpv4MappedIpv6,proto3" json:"represent_ipv4_remote_address_as_ipv4_mapped_ipv6,omitempty"`
	InternalAddressConfig                      *XProxy_InternalAddressConfig       `protobuf:"bytes,21,opt,name=internal_address_config,json=internalAddressConfig,proto3" json:"internal_address_config,omitempty"`
	DelayedCloseTimeout                        *duration.Duration                  `protobuf:"bytes,22,opt,name=delayed_close_timeout,json=delayedCloseTimeout,proto3" json:"delayed_close_timeout,omitempty"`
	XXX_NoUnkeyedLiteral                       struct{}                            `json:"-"`
	XXX_unrecognized                           []byte                              `json:"-"`
	XXX_sizecache                              int32                               `json:"-"`
}

func (m *XProxy) Reset()         { *m = XProxy{} }
func (m *XProxy) String() string { return proto.CompactTextString(m) }
func (*XProxy) ProtoMessage()    {}
func (*XProxy) Descriptor() ([]byte, []int) {
	return fileDescriptor_2681867d75fbe2e8, []int{0}
}

func (m *XProxy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XProxy.Unmarshal(m, b)
}
func (m *XProxy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XProxy.Marshal(b, m, deterministic)
}
func (m *XProxy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XProxy.Merge(m, src)
}
func (m *XProxy) XXX_Size() int {
	return xxx_messageInfo_XProxy.Size(m)
}
func (m *XProxy) XXX_DiscardUnknown() {
	xxx_messageInfo_XProxy.DiscardUnknown(m)
}

var xxx_messageInfo_XProxy proto.InternalMessageInfo

func (m *XProxy) GetXProtocol() string {
	if m != nil {
		return m.XProtocol
	}
	return ""
}

func (m *XProxy) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

type isXProxy_RouteSpecifier interface {
	isXProxy_RouteSpecifier()
}

type XProxy_Rds struct {
	Rds *Rds `protobuf:"bytes,3,opt,name=rds,proto3,oneof"`
}

type XProxy_RouteConfig struct {
	RouteConfig *v2.RouteConfiguration `protobuf:"bytes,4,opt,name=route_config,json=routeConfig,proto3,oneof"`
}

func (*XProxy_Rds) isXProxy_RouteSpecifier() {}

func (*XProxy_RouteConfig) isXProxy_RouteSpecifier() {}

func (m *XProxy) GetRouteSpecifier() isXProxy_RouteSpecifier {
	if m != nil {
		return m.RouteSpecifier
	}
	return nil
}

func (m *XProxy) GetRds() *Rds {
	if x, ok := m.GetRouteSpecifier().(*XProxy_Rds); ok {
		return x.Rds
	}
	return nil
}

func (m *XProxy) GetRouteConfig() *v2.RouteConfiguration {
	if x, ok := m.GetRouteSpecifier().(*XProxy_RouteConfig); ok {
		return x.RouteConfig
	}
	return nil
}

func (m *XProxy) GetDownstreamProtocol() XProxy_CodecType {
	if m != nil {
		return m.DownstreamProtocol
	}
	return XProxy_X
}

func (m *XProxy) GetUpstreamProtocol() XProxy_CodecType {
	if m != nil {
		return m.UpstreamProtocol
	}
	return XProxy_X
}

func (m *XProxy) GetStreamFilters() []*StreamFilter {
	if m != nil {
		return m.StreamFilters
	}
	return nil
}

func (m *XProxy) GetMetasToAddToHeader() []string {
	if m != nil {
		return m.MetasToAddToHeader
	}
	return nil
}

func (m *XProxy) GetTracing() *XProxy_Tracing {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *XProxy) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *XProxy) GetIdleTimeout() *duration.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *XProxy) GetStreamIdleTimeout() *duration.Duration {
	if m != nil {
		return m.StreamIdleTimeout
	}
	return nil
}

func (m *XProxy) GetRequestTimeout() *duration.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *XProxy) GetDrainTimeout() *duration.Duration {
	if m != nil {
		return m.DrainTimeout
	}
	return nil
}

func (m *XProxy) GetAccessLog() []*v21.AccessLog {
	if m != nil {
		return m.AccessLog
	}
	return nil
}

func (m *XProxy) GetUseRemoteAddress() *wrappers.BoolValue {
	if m != nil {
		return m.UseRemoteAddress
	}
	return nil
}

func (m *XProxy) GetGenerateRequestId() *wrappers.BoolValue {
	if m != nil {
		return m.GenerateRequestId
	}
	return nil
}

func (m *XProxy) GetForwardClientCertDetails() XProxy_ForwardClientCertDetails {
	if m != nil {
		return m.ForwardClientCertDetails
	}
	return XProxy_SANITIZE
}

func (m *XProxy) GetSetCurrentClientCertDetails() *XProxy_SetCurrentClientCertDetails {
	if m != nil {
		return m.SetCurrentClientCertDetails
	}
	return nil
}

func (m *XProxy) GetRepresentIpv4RemoteAddressAsIpv4MappedIpv6() bool {
	if m != nil {
		return m.RepresentIpv4RemoteAddressAsIpv4MappedIpv6
	}
	return false
}

func (m *XProxy) GetInternalAddressConfig() *XProxy_InternalAddressConfig {
	if m != nil {
		return m.InternalAddressConfig
	}
	return nil
}

func (m *XProxy) GetDelayedCloseTimeout() *duration.Duration {
	if m != nil {
		return m.DelayedCloseTimeout
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*XProxy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*XProxy_Rds)(nil),
		(*XProxy_RouteConfig)(nil),
	}
}

type XProxy_Tracing struct {
	OperationName         XProxy_Tracing_OperationName `protobuf:"varint,1,opt,name=operation_name,json=operationName,proto3,enum=envoy.config.filter.network.x_proxy.v2.XProxy_Tracing_OperationName" json:"operation_name,omitempty"`
	RequestHeadersForTags []string                     `protobuf:"bytes,2,rep,name=request_headers_for_tags,json=requestHeadersForTags,proto3" json:"request_headers_for_tags,omitempty"`
	ClientSampling        *_type.Percent               `protobuf:"bytes,3,opt,name=client_sampling,json=clientSampling,proto3" json:"client_sampling,omitempty"`
	RandomSampling        *_type.Percent               `protobuf:"bytes,4,opt,name=random_sampling,json=randomSampling,proto3" json:"random_sampling,omitempty"`
	OverallSampling       *_type.Percent               `protobuf:"bytes,5,opt,name=overall_sampling,json=overallSampling,proto3" json:"overall_sampling,omitempty"`
	Verbose               bool                         `protobuf:"varint,6,opt,name=verbose,proto3" json:"verbose,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                     `json:"-"`
	XXX_unrecognized      []byte                       `json:"-"`
	XXX_sizecache         int32                        `json:"-"`
}

func (m *XProxy_Tracing) Reset()         { *m = XProxy_Tracing{} }
func (m *XProxy_Tracing) String() string { return proto.CompactTextString(m) }
func (*XProxy_Tracing) ProtoMessage()    {}
func (*XProxy_Tracing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2681867d75fbe2e8, []int{0, 0}
}

func (m *XProxy_Tracing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XProxy_Tracing.Unmarshal(m, b)
}
func (m *XProxy_Tracing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XProxy_Tracing.Marshal(b, m, deterministic)
}
func (m *XProxy_Tracing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XProxy_Tracing.Merge(m, src)
}
func (m *XProxy_Tracing) XXX_Size() int {
	return xxx_messageInfo_XProxy_Tracing.Size(m)
}
func (m *XProxy_Tracing) XXX_DiscardUnknown() {
	xxx_messageInfo_XProxy_Tracing.DiscardUnknown(m)
}

var xxx_messageInfo_XProxy_Tracing proto.InternalMessageInfo

func (m *XProxy_Tracing) GetOperationName() XProxy_Tracing_OperationName {
	if m != nil {
		return m.OperationName
	}
	return XProxy_Tracing_INGRESS
}

func (m *XProxy_Tracing) GetRequestHeadersForTags() []string {
	if m != nil {
		return m.RequestHeadersForTags
	}
	return nil
}

func (m *XProxy_Tracing) GetClientSampling() *_type.Percent {
	if m != nil {
		return m.ClientSampling
	}
	return nil
}

func (m *XProxy_Tracing) GetRandomSampling() *_type.Percent {
	if m != nil {
		return m.RandomSampling
	}
	return nil
}

func (m *XProxy_Tracing) GetOverallSampling() *_type.Percent {
	if m != nil {
		return m.OverallSampling
	}
	return nil
}

func (m *XProxy_Tracing) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

type XProxy_SetCurrentClientCertDetails struct {
	Subject              *wrappers.BoolValue `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Cert                 bool                `protobuf:"varint,3,opt,name=cert,proto3" json:"cert,omitempty"`
	Dns                  bool                `protobuf:"varint,4,opt,name=dns,proto3" json:"dns,omitempty"`
	Uri                  bool                `protobuf:"varint,5,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *XProxy_SetCurrentClientCertDetails) Reset()         { *m = XProxy_SetCurrentClientCertDetails{} }
func (m *XProxy_SetCurrentClientCertDetails) String() string { return proto.CompactTextString(m) }
func (*XProxy_SetCurrentClientCertDetails) ProtoMessage()    {}
func (*XProxy_SetCurrentClientCertDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_2681867d75fbe2e8, []int{0, 1}
}

func (m *XProxy_SetCurrentClientCertDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XProxy_SetCurrentClientCertDetails.Unmarshal(m, b)
}
func (m *XProxy_SetCurrentClientCertDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XProxy_SetCurrentClientCertDetails.Marshal(b, m, deterministic)
}
func (m *XProxy_SetCurrentClientCertDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XProxy_SetCurrentClientCertDetails.Merge(m, src)
}
func (m *XProxy_SetCurrentClientCertDetails) XXX_Size() int {
	return xxx_messageInfo_XProxy_SetCurrentClientCertDetails.Size(m)
}
func (m *XProxy_SetCurrentClientCertDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_XProxy_SetCurrentClientCertDetails.DiscardUnknown(m)
}

var xxx_messageInfo_XProxy_SetCurrentClientCertDetails proto.InternalMessageInfo

func (m *XProxy_SetCurrentClientCertDetails) GetSubject() *wrappers.BoolValue {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *XProxy_SetCurrentClientCertDetails) GetCert() bool {
	if m != nil {
		return m.Cert
	}
	return false
}

func (m *XProxy_SetCurrentClientCertDetails) GetDns() bool {
	if m != nil {
		return m.Dns
	}
	return false
}

func (m *XProxy_SetCurrentClientCertDetails) GetUri() bool {
	if m != nil {
		return m.Uri
	}
	return false
}

type XProxy_InternalAddressConfig struct {
	UnixSockets          bool     `protobuf:"varint,1,opt,name=unix_sockets,json=unixSockets,proto3" json:"unix_sockets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XProxy_InternalAddressConfig) Reset()         { *m = XProxy_InternalAddressConfig{} }
func (m *XProxy_InternalAddressConfig) String() string { return proto.CompactTextString(m) }
func (*XProxy_InternalAddressConfig) ProtoMessage()    {}
func (*XProxy_InternalAddressConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2681867d75fbe2e8, []int{0, 2}
}

func (m *XProxy_InternalAddressConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XProxy_InternalAddressConfig.Unmarshal(m, b)
}
func (m *XProxy_InternalAddressConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XProxy_InternalAddressConfig.Marshal(b, m, deterministic)
}
func (m *XProxy_InternalAddressConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XProxy_InternalAddressConfig.Merge(m, src)
}
func (m *XProxy_InternalAddressConfig) XXX_Size() int {
	return xxx_messageInfo_XProxy_InternalAddressConfig.Size(m)
}
func (m *XProxy_InternalAddressConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_XProxy_InternalAddressConfig.DiscardUnknown(m)
}

var xxx_messageInfo_XProxy_InternalAddressConfig proto.InternalMessageInfo

func (m *XProxy_InternalAddressConfig) GetUnixSockets() bool {
	if m != nil {
		return m.UnixSockets
	}
	return false
}

type Rds struct {
	ConfigSource         *core.ConfigSource `protobuf:"bytes,1,opt,name=config_source,json=configSource,proto3" json:"config_source,omitempty"`
	RouteConfigName      string             `protobuf:"bytes,2,opt,name=route_config_name,json=routeConfigName,proto3" json:"route_config_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Rds) Reset()         { *m = Rds{} }
func (m *Rds) String() string { return proto.CompactTextString(m) }
func (*Rds) ProtoMessage()    {}
func (*Rds) Descriptor() ([]byte, []int) {
	return fileDescriptor_2681867d75fbe2e8, []int{1}
}

func (m *Rds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rds.Unmarshal(m, b)
}
func (m *Rds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rds.Marshal(b, m, deterministic)
}
func (m *Rds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rds.Merge(m, src)
}
func (m *Rds) XXX_Size() int {
	return xxx_messageInfo_Rds.Size(m)
}
func (m *Rds) XXX_DiscardUnknown() {
	xxx_messageInfo_Rds.DiscardUnknown(m)
}

var xxx_messageInfo_Rds proto.InternalMessageInfo

func (m *Rds) GetConfigSource() *core.ConfigSource {
	if m != nil {
		return m.ConfigSource
	}
	return nil
}

func (m *Rds) GetRouteConfigName() string {
	if m != nil {
		return m.RouteConfigName
	}
	return ""
}

type StreamFilter struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to ConfigType:
	//	*StreamFilter_Config
	//	*StreamFilter_TypedConfig
	ConfigType           isStreamFilter_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *StreamFilter) Reset()         { *m = StreamFilter{} }
func (m *StreamFilter) String() string { return proto.CompactTextString(m) }
func (*StreamFilter) ProtoMessage()    {}
func (*StreamFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_2681867d75fbe2e8, []int{2}
}

func (m *StreamFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamFilter.Unmarshal(m, b)
}
func (m *StreamFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamFilter.Marshal(b, m, deterministic)
}
func (m *StreamFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamFilter.Merge(m, src)
}
func (m *StreamFilter) XXX_Size() int {
	return xxx_messageInfo_StreamFilter.Size(m)
}
func (m *StreamFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamFilter.DiscardUnknown(m)
}

var xxx_messageInfo_StreamFilter proto.InternalMessageInfo

func (m *StreamFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isStreamFilter_ConfigType interface {
	isStreamFilter_ConfigType()
}

type StreamFilter_Config struct {
	Config *_struct.Struct `protobuf:"bytes,2,opt,name=config,proto3,oneof"`
}

type StreamFilter_TypedConfig struct {
	TypedConfig *any.Any `protobuf:"bytes,4,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*StreamFilter_Config) isStreamFilter_ConfigType() {}

func (*StreamFilter_TypedConfig) isStreamFilter_ConfigType() {}

func (m *StreamFilter) GetConfigType() isStreamFilter_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

// Deprecated: Do not use.
func (m *StreamFilter) GetConfig() *_struct.Struct {
	if x, ok := m.GetConfigType().(*StreamFilter_Config); ok {
		return x.Config
	}
	return nil
}

func (m *StreamFilter) GetTypedConfig() *any.Any {
	if x, ok := m.GetConfigType().(*StreamFilter_TypedConfig); ok {
		return x.TypedConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamFilter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamFilter_Config)(nil),
		(*StreamFilter_TypedConfig)(nil),
	}
}

func init() {
	proto.RegisterEnum("envoy.config.filter.network.x_proxy.v2.XProxy_CodecType", XProxy_CodecType_name, XProxy_CodecType_value)
	proto.RegisterEnum("envoy.config.filter.network.x_proxy.v2.XProxy_ForwardClientCertDetails", XProxy_ForwardClientCertDetails_name, XProxy_ForwardClientCertDetails_value)
	proto.RegisterEnum("envoy.config.filter.network.x_proxy.v2.XProxy_Tracing_OperationName", XProxy_Tracing_OperationName_name, XProxy_Tracing_OperationName_value)
	proto.RegisterType((*XProxy)(nil), "envoy.config.filter.network.x_proxy.v2.XProxy")
	proto.RegisterType((*XProxy_Tracing)(nil), "envoy.config.filter.network.x_proxy.v2.XProxy.Tracing")
	proto.RegisterType((*XProxy_SetCurrentClientCertDetails)(nil), "envoy.config.filter.network.x_proxy.v2.XProxy.SetCurrentClientCertDetails")
	proto.RegisterType((*XProxy_InternalAddressConfig)(nil), "envoy.config.filter.network.x_proxy.v2.XProxy.InternalAddressConfig")
	proto.RegisterType((*Rds)(nil), "envoy.config.filter.network.x_proxy.v2.Rds")
	proto.RegisterType((*StreamFilter)(nil), "envoy.config.filter.network.x_proxy.v2.StreamFilter")
}

func init() {
	proto.RegisterFile("envoy/config/filter/network/x_proxy/v2/x_proxy.proto", fileDescriptor_2681867d75fbe2e8)
}

var fileDescriptor_2681867d75fbe2e8 = []byte{
	// 1403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4b, 0x6f, 0x1b, 0x47,
	0x12, 0xd6, 0x90, 0x94, 0x44, 0x15, 0x29, 0x69, 0xd4, 0xb2, 0xa4, 0xb1, 0xb4, 0xbb, 0xe6, 0x0a,
	0x58, 0x83, 0xd8, 0x05, 0xc8, 0x5d, 0x5a, 0xeb, 0x7d, 0xc0, 0x70, 0x40, 0xea, 0x61, 0x51, 0xb0,
	0x65, 0x62, 0x48, 0xc4, 0x8f, 0x1c, 0x06, 0xad, 0x99, 0x26, 0x33, 0xf1, 0x70, 0x7a, 0xd2, 0xdd,
	0x43, 0x49, 0x40, 0x4e, 0x39, 0xfa, 0x94, 0xfc, 0x95, 0xdc, 0xf2, 0x53, 0xf2, 0x4f, 0x02, 0x9f,
	0x82, 0x7e, 0x0c, 0x45, 0xea, 0x61, 0x49, 0x41, 0x4e, 0xec, 0xe9, 0xfa, 0xbe, 0xaf, 0xab, 0xab,
	0xab, 0x8a, 0x05, 0x3b, 0x24, 0x1e, 0xd1, 0xf3, 0xba, 0x4f, 0xe3, 0x7e, 0x38, 0xa8, 0xf7, 0xc3,
	0x48, 0x10, 0x56, 0x8f, 0x89, 0x38, 0xa5, 0xec, 0x43, 0xfd, 0xcc, 0x4b, 0x18, 0x3d, 0x3b, 0xaf,
	0x8f, 0x1a, 0xd9, 0xb2, 0x96, 0x30, 0x2a, 0x28, 0x7a, 0xac, 0x58, 0x35, 0xcd, 0xaa, 0x69, 0x56,
	0xcd, 0xb0, 0x6a, 0x19, 0x74, 0xd4, 0xd8, 0xfc, 0x9b, 0x56, 0xc7, 0x49, 0x28, 0x35, 0x7c, 0xca,
	0x88, 0x39, 0xc9, 0xe3, 0x34, 0x65, 0x3e, 0xd1, 0x72, 0x9b, 0x95, 0xab, 0x30, 0x65, 0xf0, 0x69,
	0x64, 0x10, 0xeb, 0x53, 0x08, 0x16, 0x70, 0xb3, 0xff, 0xcf, 0xeb, 0xdc, 0xc7, 0xbe, 0x4f, 0x38,
	0x8f, 0xe8, 0x40, 0x62, 0xc7, 0x1f, 0x86, 0xe1, 0x68, 0x86, 0x38, 0x4f, 0x48, 0x3d, 0x21, 0xcc,
	0x27, 0xb1, 0x30, 0x96, 0x87, 0x03, 0x4a, 0x07, 0x91, 0x39, 0xfa, 0x24, 0xed, 0xd7, 0x71, 0x6c,
	0xee, 0xbb, 0xf9, 0x97, 0xcb, 0xa6, 0x20, 0x65, 0x58, 0x84, 0x34, 0x36, 0xf6, 0x3f, 0x5d, 0xb6,
	0x73, 0xc1, 0x52, 0x5f, 0xdc, 0xc4, 0x3e, 0x65, 0x38, 0x49, 0x08, 0xcb, 0x2e, 0xb1, 0x31, 0xc2,
	0x51, 0x18, 0x60, 0x41, 0xea, 0xd9, 0x42, 0x1b, 0xb6, 0x7f, 0x79, 0x00, 0x73, 0x6f, 0x3b, 0x32,
	0x98, 0xe8, 0x31, 0x80, 0x8a, 0xab, 0x0a, 0x8a, 0x63, 0x55, 0xac, 0xea, 0x42, 0x6b, 0xfe, 0x53,
	0xab, 0xc0, 0x72, 0x15, 0xcb, 0x5d, 0x38, 0xeb, 0x18, 0x0b, 0xaa, 0x42, 0x89, 0x0b, 0x2c, 0xbc,
	0x84, 0x91, 0x7e, 0x78, 0xe6, 0xe4, 0xa6, 0x81, 0x20, 0x6d, 0x1d, 0x65, 0x42, 0x5f, 0x40, 0x9e,
	0x05, 0xdc, 0xc9, 0x57, 0xac, 0x6a, 0xa9, 0xf1, 0x8f, 0xda, 0xdd, 0x5e, 0xb4, 0xe6, 0x06, 0xfc,
	0x70, 0xc6, 0x95, 0x4c, 0xb4, 0x0f, 0x65, 0x46, 0x53, 0x41, 0x3c, 0x4d, 0x72, 0x0a, 0x4a, 0xa9,
	0x62, 0x94, 0x70, 0x12, 0x2a, 0xbc, 0x44, 0xec, 0x2a, 0x80, 0x09, 0xd9, 0xe1, 0x8c, 0x5b, 0x62,
	0x17, 0xbb, 0x88, 0xc3, 0x6a, 0x40, 0x4f, 0x63, 0x2e, 0x18, 0xc1, 0xc3, 0x8b, 0x2b, 0xce, 0x56,
	0xac, 0xea, 0x52, 0xe3, 0xbf, 0x77, 0xf5, 0x4b, 0x87, 0xa9, 0xb6, 0x4b, 0x03, 0xe2, 0xf7, 0xce,
	0x13, 0xd2, 0x2a, 0x7e, 0x6a, 0xcd, 0x7e, 0x6f, 0xe5, 0x6c, 0xcb, 0x45, 0x17, 0xf2, 0xe3, 0x30,
	0x51, 0x58, 0x49, 0x93, 0xcb, 0x47, 0xce, 0xfd, 0x61, 0x47, 0xda, 0x99, 0xf8, 0xf8, 0xc0, 0xaf,
	0x60, 0xc9, 0x1c, 0xa7, 0x05, 0xb9, 0x33, 0x5f, 0xc9, 0x57, 0x4b, 0x8d, 0x9d, 0xbb, 0x9e, 0xd6,
	0x55, 0xec, 0x03, 0x65, 0x77, 0x17, 0xf9, 0xc4, 0x17, 0x47, 0x0d, 0x58, 0x1f, 0x12, 0x81, 0xb9,
	0x27, 0xa8, 0x87, 0x83, 0x40, 0xfe, 0x7c, 0x4d, 0x70, 0x40, 0x98, 0x53, 0xac, 0xe4, 0xab, 0x0b,
	0x2e, 0x52, 0xd6, 0x1e, 0x6d, 0x06, 0x41, 0x8f, 0x1e, 0x2a, 0x0b, 0xea, 0xc0, 0xbc, 0x60, 0xd8,
	0x0f, 0xe3, 0x81, 0xb3, 0xa0, 0x1e, 0xee, 0xe9, 0x3d, 0xef, 0xdd, 0xd3, 0x6c, 0x37, 0x93, 0x41,
	0x8f, 0xa0, 0xc4, 0x09, 0x1b, 0x11, 0xe6, 0xc5, 0x78, 0x48, 0x1c, 0x90, 0xa9, 0xe7, 0x82, 0xde,
	0x3a, 0xc6, 0x43, 0x82, 0x9e, 0x41, 0x39, 0x0c, 0x22, 0xe2, 0x89, 0x70, 0x48, 0x68, 0x2a, 0x9c,
	0x92, 0x3a, 0xf7, 0x61, 0x4d, 0x97, 0x47, 0x2d, 0x2b, 0x8f, 0xda, 0x9e, 0xc9, 0x14, 0xb7, 0x24,
	0xe1, 0x3d, 0x8d, 0x46, 0x6d, 0x58, 0x35, 0x11, 0x9c, 0x12, 0x29, 0xdf, 0x26, 0xb2, 0xa2, 0x59,
	0xed, 0x09, 0xa9, 0x16, 0x2c, 0x33, 0xf2, 0x6d, 0x4a, 0xb8, 0x18, 0xcb, 0x2c, 0xde, 0x26, 0xb3,
	0x64, 0x18, 0x99, 0xc6, 0x73, 0x58, 0x0c, 0x18, 0x0e, 0xe3, 0xb1, 0xc2, 0xd2, 0x6d, 0x0a, 0x65,
	0x85, 0xcf, 0xf8, 0x47, 0x00, 0xba, 0x35, 0x79, 0x11, 0x1d, 0x38, 0xcb, 0x2a, 0x19, 0xae, 0xaf,
	0xc2, 0x8b, 0x0e, 0x36, 0x6a, 0xd4, 0x9a, 0xea, 0xe3, 0x25, 0x1d, 0xb8, 0x0b, 0x38, 0x5b, 0xa2,
	0x43, 0x40, 0x29, 0x27, 0x1e, 0x23, 0x43, 0x2a, 0x88, 0xcc, 0x00, 0x46, 0x38, 0x77, 0x6c, 0xe5,
	0xd0, 0xe6, 0x15, 0x87, 0x5a, 0x94, 0x46, 0x5f, 0xe2, 0x28, 0x25, 0xae, 0x9d, 0x72, 0xe2, 0x2a,
	0x52, 0x53, 0x73, 0xd0, 0x11, 0xac, 0x0e, 0x48, 0x4c, 0x18, 0x16, 0x52, 0x4e, 0x87, 0x28, 0x0c,
	0x9c, 0x95, 0x5b, 0xa5, 0x56, 0x32, 0x9a, 0xab, 0x59, 0xed, 0x00, 0xfd, 0x60, 0xc1, 0x56, 0x9f,
	0xb2, 0x53, 0xcc, 0x02, 0xcf, 0x8f, 0x42, 0x12, 0x0b, 0xcf, 0x27, 0x4c, 0x78, 0x01, 0x11, 0x38,
	0x8c, 0xb8, 0x83, 0x54, 0xb9, 0xbd, 0xb8, 0x67, 0xda, 0x1d, 0x68, 0xc5, 0x5d, 0x25, 0xb8, 0x4b,
	0x98, 0xd8, 0xd3, 0x72, 0x13, 0xd5, 0xe7, 0xf4, 0x6f, 0xc0, 0x48, 0x97, 0x1e, 0x71, 0x22, 0x3c,
	0x3f, 0x65, 0x4c, 0xf9, 0x73, 0x8d, 0x5b, 0xab, 0xea, 0xae, 0x47, 0xf7, 0x74, 0xab, 0x4b, 0xc4,
	0xae, 0x16, 0xbd, 0x72, 0xaa, 0xbb, 0xc5, 0x6f, 0x36, 0x22, 0x02, 0xff, 0x62, 0x24, 0x61, 0x84,
	0x4b, 0x47, 0xc2, 0x64, 0xb4, 0x73, 0xe9, 0x19, 0x3d, 0xcc, 0xf5, 0xf6, 0x50, 0xfe, 0x67, 0x04,
	0x72, 0xfd, 0xd4, 0x79, 0x50, 0xb1, 0xaa, 0x45, 0xf7, 0xef, 0x63, 0x62, 0x3b, 0x19, 0xed, 0x4c,
	0x3d, 0x64, 0x93, 0xcb, 0xad, 0x57, 0x8a, 0xd2, 0x4e, 0x46, 0x4f, 0xd1, 0x77, 0xb0, 0x11, 0xc6,
	0x82, 0xb0, 0x18, 0x47, 0x63, 0x65, 0xd3, 0xb7, 0xd7, 0xd4, 0x85, 0xf7, 0xee, 0x79, 0xe1, 0xb6,
	0x51, 0x33, 0x07, 0xea, 0x66, 0xee, 0xae, 0x85, 0xd7, 0x6d, 0xa3, 0x57, 0xb0, 0x16, 0x90, 0x08,
	0x9f, 0x13, 0x99, 0x09, 0x94, 0x5f, 0x54, 0xef, 0xfa, 0x6d, 0x45, 0xb3, 0x6a, 0x78, 0xbb, 0x92,
	0x66, 0x6a, 0x67, 0xf3, 0xe7, 0x3c, 0xcc, 0x9b, 0xf6, 0x83, 0x52, 0x58, 0xa2, 0x09, 0xd1, 0x68,
	0xdd, 0x78, 0x2c, 0x95, 0x57, 0x7b, 0xbf, 0xaf, 0x9d, 0xd5, 0x5e, 0x67, 0x62, 0xb2, 0x65, 0x4d,
	0x24, 0xd5, 0x22, 0x9d, 0x34, 0xa0, 0xff, 0x80, 0x93, 0xd5, 0x87, 0x6e, 0xb5, 0xdc, 0xeb, 0x53,
	0xe6, 0x09, 0x3c, 0xe0, 0x4e, 0x4e, 0x35, 0xdd, 0x35, 0x63, 0xd7, 0xfd, 0x96, 0x1f, 0x50, 0xd6,
	0xc3, 0x03, 0x8e, 0x9e, 0xc1, 0xb2, 0xc9, 0x3a, 0x8e, 0x87, 0x49, 0x24, 0xfb, 0xaf, 0xfe, 0x0b,
	0x5e, 0x35, 0x0e, 0xcb, 0xc9, 0xa4, 0xd6, 0xd1, 0x93, 0x89, 0xbb, 0xa4, 0xb1, 0x5d, 0x03, 0x95,
	0x6c, 0x86, 0xe3, 0x80, 0x0e, 0x2f, 0xd8, 0x85, 0xcf, 0xb0, 0x35, 0x76, 0xcc, 0x7e, 0x0e, 0x36,
	0x1d, 0x11, 0x86, 0xa3, 0xe8, 0x82, 0x3e, 0x7b, 0x33, 0x7d, 0xd9, 0x80, 0xc7, 0x7c, 0x07, 0xe6,
	0x47, 0x84, 0x9d, 0x50, 0x4e, 0xd4, 0x7f, 0x65, 0xd1, 0xcd, 0x3e, 0xb7, 0xab, 0xb0, 0x38, 0x15,
	0x38, 0x54, 0x82, 0xf9, 0xf6, 0xf1, 0x0b, 0x77, 0xbf, 0xdb, 0xb5, 0x67, 0x10, 0xc0, 0xdc, 0xbe,
	0x5e, 0x5b, 0x9b, 0x3f, 0x5a, 0xb0, 0xf5, 0x99, 0x62, 0x41, 0x3b, 0x30, 0xcf, 0xd3, 0x93, 0x6f,
	0x88, 0x2f, 0xd4, 0x43, 0x7e, 0xbe, 0xeb, 0x64, 0x50, 0x84, 0xa0, 0x20, 0x8b, 0x58, 0x85, 0xb2,
	0xe8, 0xaa, 0x35, 0xb2, 0x21, 0x1f, 0xc4, 0x5c, 0xc5, 0xa7, 0xe8, 0xca, 0xa5, 0xdc, 0x49, 0x59,
	0xa8, 0xae, 0x5c, 0x74, 0xe5, 0xf2, 0xa8, 0x50, 0xcc, 0xd9, 0xf9, 0xcd, 0xff, 0xc3, 0xda, 0xb5,
	0xe9, 0x8c, 0xfe, 0x0a, 0xe5, 0x34, 0x0e, 0xcf, 0x3c, 0x4e, 0xfd, 0x0f, 0x44, 0x70, 0xe5, 0x51,
	0xd1, 0x2d, 0xc9, 0xbd, 0xae, 0xde, 0xda, 0xfe, 0x33, 0x2c, 0x8c, 0x27, 0x00, 0x34, 0x0b, 0xd6,
	0x5b, 0x7b, 0x06, 0x2d, 0xc0, 0xec, 0x61, 0xaf, 0xd7, 0x69, 0xd8, 0xd6, 0xf6, 0x39, 0x38, 0x37,
	0x75, 0x2c, 0x54, 0x86, 0x62, 0xb7, 0x79, 0xdc, 0xee, 0xb5, 0xdf, 0xef, 0xdb, 0x33, 0xc8, 0x86,
	0xf2, 0xc1, 0x6b, 0xf7, 0x4d, 0xd3, 0xdd, 0xf3, 0x5e, 0x1f, 0xbf, 0x7c, 0x67, 0x5b, 0x08, 0xc1,
	0x52, 0xb3, 0xd3, 0xd9, 0x3f, 0xde, 0xf3, 0x8c, 0xc1, 0xce, 0x49, 0x54, 0xc6, 0xf1, 0xba, 0xfb,
	0x3d, 0x3b, 0x8f, 0x36, 0x60, 0xb5, 0xf9, 0xf2, 0x4d, 0xf3, 0x5d, 0xd7, 0x9b, 0xa2, 0x17, 0x5a,
	0xeb, 0xb0, 0xac, 0xe7, 0x33, 0x9e, 0x10, 0x3f, 0xec, 0x87, 0x84, 0xa1, 0xfc, 0xaf, 0x2d, 0xeb,
	0xa8, 0x50, 0xdc, 0xb0, 0x9d, 0xed, 0x8f, 0x16, 0xe4, 0xdd, 0x80, 0xa3, 0x63, 0x58, 0x9c, 0x1a,
	0xc9, 0x4d, 0xd4, 0x1f, 0x4d, 0x8f, 0x71, 0x72, 0x26, 0xaf, 0xe9, 0xa0, 0x74, 0x15, 0x4c, 0x55,
	0xc6, 0x47, 0x55, 0x19, 0x65, 0x7f, 0x62, 0x1f, 0x3d, 0x81, 0x95, 0xc9, 0xa9, 0x50, 0x97, 0xe4,
	0xa5, 0x31, 0x74, 0x79, 0x62, 0xfe, 0x93, 0xd9, 0xb2, 0xfd, 0x93, 0x05, 0xe5, 0xc9, 0x01, 0x07,
	0x6d, 0x41, 0x61, 0x5c, 0xcb, 0x13, 0x44, 0xb5, 0x89, 0xfe, 0x0d, 0x73, 0xa6, 0x75, 0xe5, 0x94,
	0xaf, 0x1b, 0x57, 0x32, 0xa4, 0xab, 0xc6, 0xef, 0x56, 0xce, 0xb1, 0x0e, 0x67, 0x5c, 0x03, 0x46,
	0xff, 0x83, 0xb2, 0x4c, 0xef, 0x60, 0x7a, 0x5e, 0x7d, 0x70, 0x85, 0xdc, 0x8c, 0xcf, 0xe5, 0x8c,
	0xaa, 0xb0, 0xda, 0xc7, 0xd6, 0x22, 0x94, 0xcc, 0x75, 0xe4, 0xee, 0x51, 0xa1, 0x98, 0xb7, 0x0b,
	0xad, 0x36, 0xec, 0x84, 0x54, 0x87, 0x49, 0x37, 0x93, 0xbb, 0x35, 0x9c, 0x56, 0x49, 0x77, 0x1c,
	0x35, 0x1a, 0x76, 0xac, 0xf7, 0xb9, 0x51, 0xe3, 0x64, 0x4e, 0x1d, 0xfe, 0xe4, 0xb7, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xcb, 0xb0, 0xfa, 0x30, 0x8e, 0x0d, 0x00, 0x00,
}
