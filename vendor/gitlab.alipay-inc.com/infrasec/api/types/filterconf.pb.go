// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: filterconf.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RBACFilterConf struct {
	// appname
	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// The flag whether rbac filter is enable, default false
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	// The version of filter config
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// The log path of rbac filter
	RbacLogPath string `protobuf:"bytes,4,opt,name=rbac_log_path,json=rbacLogPath,proto3" json:"rbac_log_path,omitempty"`
	// The sls client conf
	SlsClientConf *SlsClientConf `protobuf:"bytes,5,opt,name=sls_client_conf,json=slsClientConf,proto3" json:"sls_client_conf,omitempty"`
	// Specify the RBAC rules to be applied globally.
	// If absent, no enforcing RBAC policy will be applied.
	Rules *RBAC `protobuf:"bytes,6,opt,name=rules,proto3" json:"rules,omitempty"`
	// Shadow rules are not enforced by the filter (i.e., returning a 403)
	// but will emit stats and logs and can be used for rule testing.
	// If absent, no shadow RBAC policy with be applied.
	ShadowRules *RBAC `protobuf:"bytes,7,opt,name=shadow_rules,json=shadowRules,proto3" json:"shadow_rules,omitempty"`
	// The dataId if service
	ServiceName          string   `protobuf:"bytes,8,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RBACFilterConf) Reset()         { *m = RBACFilterConf{} }
func (m *RBACFilterConf) String() string { return proto.CompactTextString(m) }
func (*RBACFilterConf) ProtoMessage()    {}
func (*RBACFilterConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_08bee002f4400367, []int{0}
}
func (m *RBACFilterConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBACFilterConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBACFilterConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBACFilterConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBACFilterConf.Merge(m, src)
}
func (m *RBACFilterConf) XXX_Size() int {
	return m.Size()
}
func (m *RBACFilterConf) XXX_DiscardUnknown() {
	xxx_messageInfo_RBACFilterConf.DiscardUnknown(m)
}

var xxx_messageInfo_RBACFilterConf proto.InternalMessageInfo

func (m *RBACFilterConf) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *RBACFilterConf) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *RBACFilterConf) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RBACFilterConf) GetRbacLogPath() string {
	if m != nil {
		return m.RbacLogPath
	}
	return ""
}

func (m *RBACFilterConf) GetSlsClientConf() *SlsClientConf {
	if m != nil {
		return m.SlsClientConf
	}
	return nil
}

func (m *RBACFilterConf) GetRules() *RBAC {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *RBACFilterConf) GetShadowRules() *RBAC {
	if m != nil {
		return m.ShadowRules
	}
	return nil
}

func (m *RBACFilterConf) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type RBACFilters struct {
	// RBACFilterConf array for each service
	Confs                []*RBACFilterConf `protobuf:"bytes,1,rep,name=confs,proto3" json:"confs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RBACFilters) Reset()         { *m = RBACFilters{} }
func (m *RBACFilters) String() string { return proto.CompactTextString(m) }
func (*RBACFilters) ProtoMessage()    {}
func (*RBACFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_08bee002f4400367, []int{1}
}
func (m *RBACFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBACFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBACFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBACFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBACFilters.Merge(m, src)
}
func (m *RBACFilters) XXX_Size() int {
	return m.Size()
}
func (m *RBACFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_RBACFilters.DiscardUnknown(m)
}

var xxx_messageInfo_RBACFilters proto.InternalMessageInfo

func (m *RBACFilters) GetConfs() []*RBACFilterConf {
	if m != nil {
		return m.Confs
	}
	return nil
}

func init() {
	proto.RegisterType((*RBACFilterConf)(nil), "meshapi.security.rbac.v1.RBACFilterConf")
	proto.RegisterType((*RBACFilters)(nil), "meshapi.security.rbac.v1.RBACFilters")
}

func init() { proto.RegisterFile("filterconf.proto", fileDescriptor_08bee002f4400367) }

var fileDescriptor_08bee002f4400367 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x2d, 0xe9, 0x87, 0xd3, 0x02, 0xf2, 0x00, 0xa6, 0x43, 0x14, 0xba, 0x90, 0x29, 0x12,
	0x85, 0x19, 0xa9, 0xad, 0xc4, 0xc4, 0x97, 0xc2, 0xc6, 0x12, 0xb9, 0xc1, 0x6d, 0x22, 0xb9, 0xb1,
	0x95, 0x73, 0x8b, 0xfa, 0x4f, 0xf8, 0x49, 0x8c, 0xfc, 0x04, 0x54, 0x76, 0x7e, 0x03, 0xb2, 0x5d,
	0xa9, 0x2c, 0x45, 0x6c, 0x77, 0xe7, 0xf7, 0xde, 0xf9, 0xbd, 0xc3, 0x47, 0xd3, 0x42, 0x68, 0x5e,
	0x65, 0xb2, 0x9c, 0xc6, 0xaa, 0x92, 0x5a, 0x12, 0x3a, 0xe7, 0x90, 0x33, 0x55, 0xc4, 0xc0, 0xb3,
	0x45, 0x55, 0xe8, 0x55, 0x5c, 0x4d, 0x58, 0x16, 0x2f, 0x2f, 0x7a, 0xd8, 0x16, 0x16, 0xd5, 0x6b,
	0x83, 0x00, 0x57, 0xf6, 0xbf, 0x6b, 0xf8, 0x20, 0x19, 0x0d, 0xc7, 0x37, 0x56, 0x69, 0x2c, 0xcb,
	0x29, 0x39, 0xc5, 0x2d, 0xa6, 0x54, 0x5a, 0xb2, 0x39, 0xa7, 0x28, 0x44, 0x51, 0x3b, 0x69, 0x32,
	0xa5, 0xee, 0xd9, 0x9c, 0x93, 0x63, 0xdc, 0xe0, 0x25, 0x9b, 0x08, 0x4e, 0x6b, 0x21, 0x8a, 0x5a,
	0xc9, 0xa6, 0x23, 0x14, 0x37, 0x97, 0xbc, 0x82, 0x42, 0x96, 0xb4, 0xee, 0x18, 0x9b, 0x96, 0xf4,
	0x71, 0xd7, 0x2c, 0x4e, 0x85, 0x9c, 0xa5, 0x8a, 0xe9, 0x9c, 0xee, 0xdb, 0x77, 0xdf, 0x0c, 0x6f,
	0xe5, 0xec, 0x91, 0xe9, 0x9c, 0x3c, 0xe0, 0x43, 0x10, 0x90, 0x66, 0xa2, 0xe0, 0xa5, 0x4e, 0x8d,
	0x1b, 0xea, 0x85, 0x28, 0xf2, 0x07, 0xe7, 0xf1, 0x2e, 0x3b, 0xf1, 0x93, 0x80, 0xb1, 0xc5, 0x9b,
	0x2f, 0x27, 0x5d, 0xf8, 0xdd, 0x92, 0x2b, 0xec, 0x55, 0x0b, 0xc1, 0x81, 0x36, 0xac, 0x4c, 0xb0,
	0x5b, 0xc6, 0x58, 0x4f, 0x1c, 0x98, 0x0c, 0x71, 0x07, 0x72, 0xf6, 0x22, 0x5f, 0x53, 0x47, 0x6e,
	0xfe, 0x8b, 0xec, 0x3b, 0x4e, 0x62, 0x25, 0xce, 0x70, 0x07, 0x78, 0xb5, 0x2c, 0x32, 0xee, 0xe2,
	0x6b, 0x39, 0xb3, 0x9b, 0x99, 0x89, 0xb0, 0x7f, 0x87, 0xfd, 0x6d, 0xde, 0x40, 0xae, 0xb1, 0x67,
	0x0c, 0x03, 0x45, 0x61, 0x3d, 0xf2, 0x07, 0xd1, 0xdf, 0xdb, 0xb6, 0x57, 0x4a, 0x1c, 0x6d, 0x74,
	0xf2, 0xbe, 0x0e, 0xd0, 0xc7, 0x3a, 0x40, 0x9f, 0xeb, 0x00, 0xbd, 0x7d, 0x05, 0x7b, 0xcf, 0x9e,
	0x5e, 0x29, 0x0e, 0x93, 0x86, 0xbd, 0xef, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x36,
	0x4d, 0xf6, 0x24, 0x02, 0x00, 0x00,
}

func (m *RBACFilterConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBACFilterConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBACFilterConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintFilterconf(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x42
	}
	if m.ShadowRules != nil {
		{
			size, err := m.ShadowRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilterconf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Rules != nil {
		{
			size, err := m.Rules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilterconf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SlsClientConf != nil {
		{
			size, err := m.SlsClientConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilterconf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RbacLogPath) > 0 {
		i -= len(m.RbacLogPath)
		copy(dAtA[i:], m.RbacLogPath)
		i = encodeVarintFilterconf(dAtA, i, uint64(len(m.RbacLogPath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintFilterconf(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintFilterconf(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RBACFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBACFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBACFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Confs) > 0 {
		for iNdEx := len(m.Confs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFilterconf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilterconf(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilterconf(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RBACFilterConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovFilterconf(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovFilterconf(uint64(l))
	}
	l = len(m.RbacLogPath)
	if l > 0 {
		n += 1 + l + sovFilterconf(uint64(l))
	}
	if m.SlsClientConf != nil {
		l = m.SlsClientConf.Size()
		n += 1 + l + sovFilterconf(uint64(l))
	}
	if m.Rules != nil {
		l = m.Rules.Size()
		n += 1 + l + sovFilterconf(uint64(l))
	}
	if m.ShadowRules != nil {
		l = m.ShadowRules.Size()
		n += 1 + l + sovFilterconf(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovFilterconf(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RBACFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confs) > 0 {
		for _, e := range m.Confs {
			l = e.Size()
			n += 1 + l + sovFilterconf(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFilterconf(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilterconf(x uint64) (n int) {
	return sovFilterconf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RBACFilterConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilterconf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBACFilterConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBACFilterConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilterconf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilterconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilterconf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilterconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RbacLogPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilterconf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilterconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RbacLogPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlsClientConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilterconf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilterconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlsClientConf == nil {
				m.SlsClientConf = &SlsClientConf{}
			}
			if err := m.SlsClientConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilterconf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilterconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rules == nil {
				m.Rules = &RBAC{}
			}
			if err := m.Rules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShadowRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilterconf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilterconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShadowRules == nil {
				m.ShadowRules = &RBAC{}
			}
			if err := m.ShadowRules.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilterconf
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilterconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilterconf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilterconf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilterconf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBACFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilterconf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBACFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBACFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilterconf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilterconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confs = append(m.Confs, &RBACFilterConf{})
			if err := m.Confs[len(m.Confs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilterconf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilterconf
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilterconf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilterconf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilterconf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilterconf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilterconf
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilterconf
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilterconf
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilterconf        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilterconf          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilterconf = fmt.Errorf("proto: unexpected end of group")
)
