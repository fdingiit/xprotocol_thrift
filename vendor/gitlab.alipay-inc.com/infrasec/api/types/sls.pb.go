// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sls.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Mode int32

const (
	Mode_RAW         Mode = 0
	Mode_LOCAL_CRYPT Mode = 1
	Mode_MIST_CRYPT  Mode = 2
)

var Mode_name = map[int32]string{
	0: "RAW",
	1: "LOCAL_CRYPT",
	2: "MIST_CRYPT",
}

var Mode_value = map[string]int32{
	"RAW":         0,
	"LOCAL_CRYPT": 1,
	"MIST_CRYPT":  2,
}

func (x Mode) String() string {
	return proto.EnumName(Mode_name, int32(x))
}

func (Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c6b499e77351ce2e, []int{0}
}

// SlsClientConf holds all the attributes which sls client in rbac filter needs
type SlsClientConf struct {
	Mode    Mode   `protobuf:"varint,1,opt,name=mode,proto3,enum=meshapi.security.rbac.v1.Mode" json:"mode,omitempty"`
	Handler string `protobuf:"bytes,2,opt,name=handler,proto3" json:"handler,omitempty"`
	Key     []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Sls endpoint, exp: cn-shanghai-ant.log.aliyuncs.com
	Endpoint string `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Sls project name
	ProjectName string `protobuf:"bytes,5,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// Sls logstore name
	LogstoreName string `protobuf:"bytes,6,opt,name=logstore_name,json=logstoreName,proto3" json:"logstore_name,omitempty"`
	// Sls access id
	AccessId string `protobuf:"bytes,7,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	// Sls access secret
	AccessSecret string `protobuf:"bytes,8,opt,name=access_secret,json=accessSecret,proto3" json:"access_secret,omitempty"`
	// The buffer size of sls client in rbac filter.
	// Sls client will launch logs to sls endpoint after `<buffer_size>` numbers of request have been cached.
	BufferSize int32 `protobuf:"varint,9,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	// The push period of sls client in rbac filter.
	// Sls client will launch logs to sls endpoint after `push_period` seconds.
	PushPeriod int32 `protobuf:"varint,10,opt,name=push_period,json=pushPeriod,proto3" json:"push_period,omitempty"`
	// Sls log chan size
	ChanSize int32 `protobuf:"varint,11,opt,name=chan_size,json=chanSize,proto3" json:"chan_size,omitempty"`
	// using http
	UsingHttp bool `protobuf:"varint,12,opt,name=using_http,json=usingHttp,proto3" json:"using_http,omitempty"`
	// token
	Token string `protobuf:"bytes,13,opt,name=token,proto3" json:"token,omitempty"`
	// user agent
	UserAgent string `protobuf:"bytes,14,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	// WithRequestTimeout second
	RequestTimeout int32 `protobuf:"varint,15,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// WithRetryTimeout second
	RetryTimeout         int32    `protobuf:"varint,16,opt,name=retry_timeout,json=retryTimeout,proto3" json:"retry_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlsClientConf) Reset()         { *m = SlsClientConf{} }
func (m *SlsClientConf) String() string { return proto.CompactTextString(m) }
func (*SlsClientConf) ProtoMessage()    {}
func (*SlsClientConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_c6b499e77351ce2e, []int{0}
}
func (m *SlsClientConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlsClientConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlsClientConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlsClientConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlsClientConf.Merge(m, src)
}
func (m *SlsClientConf) XXX_Size() int {
	return m.Size()
}
func (m *SlsClientConf) XXX_DiscardUnknown() {
	xxx_messageInfo_SlsClientConf.DiscardUnknown(m)
}

var xxx_messageInfo_SlsClientConf proto.InternalMessageInfo

func (m *SlsClientConf) GetMode() Mode {
	if m != nil {
		return m.Mode
	}
	return Mode_RAW
}

func (m *SlsClientConf) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *SlsClientConf) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SlsClientConf) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *SlsClientConf) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *SlsClientConf) GetLogstoreName() string {
	if m != nil {
		return m.LogstoreName
	}
	return ""
}

func (m *SlsClientConf) GetAccessId() string {
	if m != nil {
		return m.AccessId
	}
	return ""
}

func (m *SlsClientConf) GetAccessSecret() string {
	if m != nil {
		return m.AccessSecret
	}
	return ""
}

func (m *SlsClientConf) GetBufferSize() int32 {
	if m != nil {
		return m.BufferSize
	}
	return 0
}

func (m *SlsClientConf) GetPushPeriod() int32 {
	if m != nil {
		return m.PushPeriod
	}
	return 0
}

func (m *SlsClientConf) GetChanSize() int32 {
	if m != nil {
		return m.ChanSize
	}
	return 0
}

func (m *SlsClientConf) GetUsingHttp() bool {
	if m != nil {
		return m.UsingHttp
	}
	return false
}

func (m *SlsClientConf) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SlsClientConf) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *SlsClientConf) GetRequestTimeout() int32 {
	if m != nil {
		return m.RequestTimeout
	}
	return 0
}

func (m *SlsClientConf) GetRetryTimeout() int32 {
	if m != nil {
		return m.RetryTimeout
	}
	return 0
}

func init() {
	proto.RegisterEnum("meshapi.security.rbac.v1.Mode", Mode_name, Mode_value)
	proto.RegisterType((*SlsClientConf)(nil), "meshapi.security.rbac.v1.SlsClientConf")
}

func init() { proto.RegisterFile("sls.proto", fileDescriptor_c6b499e77351ce2e) }

var fileDescriptor_c6b499e77351ce2e = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xe7, 0xb5, 0x5d, 0x9b, 0xd3, 0xbf, 0xb2, 0x90, 0xb0, 0x40, 0x94, 0x02, 0x17, 0x44,
	0x5c, 0x44, 0x30, 0x9e, 0xa0, 0xf4, 0x86, 0x49, 0x1b, 0x4c, 0x69, 0x25, 0x04, 0x37, 0x51, 0x9a,
	0x9c, 0x36, 0x66, 0x89, 0x1d, 0x6c, 0x07, 0xa9, 0x7b, 0x10, 0xc4, 0x23, 0x71, 0xc9, 0x23, 0xa0,
	0xf2, 0x22, 0xc8, 0x76, 0xb6, 0x3b, 0xee, 0x72, 0x7e, 0xdf, 0xef, 0xb3, 0x8f, 0x92, 0x40, 0xa0,
	0x4b, 0x1d, 0xd5, 0x4a, 0x1a, 0x49, 0x59, 0x85, 0xba, 0x48, 0x6b, 0x1e, 0x69, 0xcc, 0x1a, 0xc5,
	0xcd, 0x21, 0x52, 0xdb, 0x34, 0x8b, 0xbe, 0xbf, 0x79, 0xfe, 0xa3, 0x0b, 0xe3, 0x75, 0xa9, 0x57,
	0x25, 0x47, 0x61, 0x56, 0x52, 0xec, 0xe8, 0x39, 0x74, 0x2b, 0x99, 0x23, 0x23, 0x0b, 0x12, 0x4e,
	0xce, 0xe7, 0xd1, 0xff, 0xaa, 0xd1, 0x95, 0xcc, 0x31, 0x76, 0x2e, 0x65, 0xd0, 0x2f, 0x52, 0x91,
	0x97, 0xa8, 0xd8, 0xe9, 0x82, 0x84, 0x41, 0x7c, 0x37, 0xd2, 0x19, 0x74, 0x6e, 0xf0, 0xc0, 0x3a,
	0x0b, 0x12, 0x8e, 0x62, 0xfb, 0x48, 0x1f, 0xc1, 0x00, 0x45, 0x5e, 0x4b, 0x2e, 0x0c, 0xeb, 0x3a,
	0xf9, 0x7e, 0xa6, 0xcf, 0x60, 0x54, 0x2b, 0xf9, 0x15, 0x33, 0x93, 0x88, 0xb4, 0x42, 0xd6, 0x73,
	0xf9, 0xb0, 0x65, 0x1f, 0xd2, 0x0a, 0xe9, 0x0b, 0x18, 0x97, 0x72, 0xaf, 0x8d, 0x54, 0xe8, 0x9d,
	0x33, 0xe7, 0x8c, 0xee, 0xa0, 0x93, 0x1e, 0x43, 0x90, 0x66, 0x19, 0x6a, 0x9d, 0xf0, 0x9c, 0xf5,
	0xfd, 0x25, 0x1e, 0x5c, 0xe4, 0xf6, 0x84, 0x36, 0xd4, 0x98, 0x29, 0x34, 0x6c, 0xe0, 0x4f, 0xf0,
	0x70, 0xed, 0x18, 0x7d, 0x0a, 0xc3, 0x6d, 0xb3, 0xdb, 0xa1, 0x4a, 0x34, 0xbf, 0x45, 0x16, 0x2c,
	0x48, 0xd8, 0x8b, 0xc1, 0xa3, 0x35, 0xbf, 0x45, 0x2b, 0xd4, 0x8d, 0x2e, 0x92, 0x1a, 0x15, 0x97,
	0x39, 0x03, 0x2f, 0x58, 0x74, 0xed, 0x88, 0xdd, 0x21, 0x2b, 0x52, 0xe1, 0xfb, 0x43, 0x17, 0x0f,
	0x2c, 0x70, 0xed, 0x27, 0x00, 0x8d, 0xe6, 0x62, 0x9f, 0x14, 0xc6, 0xd4, 0x6c, 0xb4, 0x20, 0xe1,
	0x20, 0x0e, 0x1c, 0x79, 0x6f, 0x4c, 0x4d, 0x1f, 0x40, 0xcf, 0xc8, 0x1b, 0x14, 0x6c, 0xec, 0x56,
	0xf3, 0x83, 0x2f, 0xa1, 0x4a, 0xd2, 0x3d, 0x0a, 0xc3, 0x26, 0x2e, 0x0a, 0x2c, 0x59, 0x5a, 0x40,
	0x5f, 0xc2, 0x54, 0xe1, 0xb7, 0x06, 0xb5, 0x49, 0x0c, 0xaf, 0x50, 0x36, 0x86, 0x4d, 0xdd, 0xb5,
	0x93, 0x16, 0x6f, 0x3c, 0xb5, 0x2f, 0x40, 0xa1, 0x51, 0x87, 0x7b, 0x6d, 0xe6, 0xb4, 0x91, 0x83,
	0xad, 0xf4, 0xea, 0x35, 0x74, 0xed, 0x07, 0xa6, 0x7d, 0xe8, 0xc4, 0xcb, 0x4f, 0xb3, 0x13, 0x3a,
	0x85, 0xe1, 0xe5, 0xc7, 0xd5, 0xf2, 0x32, 0x59, 0xc5, 0x9f, 0xaf, 0x37, 0x33, 0x42, 0x27, 0x00,
	0x57, 0x17, 0xeb, 0x4d, 0x3b, 0x9f, 0xbe, 0x7b, 0xf8, 0xeb, 0x38, 0x27, 0xbf, 0x8f, 0x73, 0xf2,
	0xe7, 0x38, 0x27, 0x3f, 0xff, 0xce, 0x4f, 0xbe, 0xf4, 0xcc, 0xa1, 0x46, 0xbd, 0x3d, 0x73, 0x3f,
	0xe1, 0xdb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x47, 0x8f, 0x60, 0x30, 0x91, 0x02, 0x00, 0x00,
}

func (m *SlsClientConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlsClientConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlsClientConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetryTimeout != 0 {
		i = encodeVarintSls(dAtA, i, uint64(m.RetryTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.RequestTimeout != 0 {
		i = encodeVarintSls(dAtA, i, uint64(m.RequestTimeout))
		i--
		dAtA[i] = 0x78
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintSls(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSls(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x6a
	}
	if m.UsingHttp {
		i--
		if m.UsingHttp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.ChanSize != 0 {
		i = encodeVarintSls(dAtA, i, uint64(m.ChanSize))
		i--
		dAtA[i] = 0x58
	}
	if m.PushPeriod != 0 {
		i = encodeVarintSls(dAtA, i, uint64(m.PushPeriod))
		i--
		dAtA[i] = 0x50
	}
	if m.BufferSize != 0 {
		i = encodeVarintSls(dAtA, i, uint64(m.BufferSize))
		i--
		dAtA[i] = 0x48
	}
	if len(m.AccessSecret) > 0 {
		i -= len(m.AccessSecret)
		copy(dAtA[i:], m.AccessSecret)
		i = encodeVarintSls(dAtA, i, uint64(len(m.AccessSecret)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AccessId) > 0 {
		i -= len(m.AccessId)
		copy(dAtA[i:], m.AccessId)
		i = encodeVarintSls(dAtA, i, uint64(len(m.AccessId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LogstoreName) > 0 {
		i -= len(m.LogstoreName)
		copy(dAtA[i:], m.LogstoreName)
		i = encodeVarintSls(dAtA, i, uint64(len(m.LogstoreName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintSls(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintSls(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSls(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Handler) > 0 {
		i -= len(m.Handler)
		copy(dAtA[i:], m.Handler)
		i = encodeVarintSls(dAtA, i, uint64(len(m.Handler)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mode != 0 {
		i = encodeVarintSls(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSls(dAtA []byte, offset int, v uint64) int {
	offset -= sovSls(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SlsClientConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovSls(uint64(m.Mode))
	}
	l = len(m.Handler)
	if l > 0 {
		n += 1 + l + sovSls(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSls(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovSls(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovSls(uint64(l))
	}
	l = len(m.LogstoreName)
	if l > 0 {
		n += 1 + l + sovSls(uint64(l))
	}
	l = len(m.AccessId)
	if l > 0 {
		n += 1 + l + sovSls(uint64(l))
	}
	l = len(m.AccessSecret)
	if l > 0 {
		n += 1 + l + sovSls(uint64(l))
	}
	if m.BufferSize != 0 {
		n += 1 + sovSls(uint64(m.BufferSize))
	}
	if m.PushPeriod != 0 {
		n += 1 + sovSls(uint64(m.PushPeriod))
	}
	if m.ChanSize != 0 {
		n += 1 + sovSls(uint64(m.ChanSize))
	}
	if m.UsingHttp {
		n += 2
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSls(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovSls(uint64(l))
	}
	if m.RequestTimeout != 0 {
		n += 1 + sovSls(uint64(m.RequestTimeout))
	}
	if m.RetryTimeout != 0 {
		n += 2 + sovSls(uint64(m.RetryTimeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSls(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSls(x uint64) (n int) {
	return sovSls(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SlsClientConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSls
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlsClientConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlsClientConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= Mode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSls
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogstoreName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogstoreName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferSize", wireType)
			}
			m.BufferSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushPeriod", wireType)
			}
			m.PushPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushPeriod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanSize", wireType)
			}
			m.ChanSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsingHttp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsingHttp = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSls
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSls
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimeout", wireType)
			}
			m.RequestTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryTimeout", wireType)
			}
			m.RetryTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSls
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSls(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSls
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSls
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSls(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSls
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSls
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSls
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSls
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSls
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSls
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSls        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSls          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSls = fmt.Errorf("proto: unexpected end of group")
)
