// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rbac.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Should we do safe-list or block-list style access control?
type RBAC_Action int32

const (
	// The policies deny access to principals. The rest is allowed. This is block-list style
	// access control.
	RBAC_DENY RBAC_Action = 0
	// The policies grant access to principals. The rest is denied. This is safe-list style
	// access control. This is the default type.
	RBAC_ALLOW RBAC_Action = 1
)

var RBAC_Action_name = map[int32]string{
	0: "DENY",
	1: "ALLOW",
}

var RBAC_Action_value = map[string]int32{
	"DENY":  0,
	"ALLOW": 1,
}

func (x RBAC_Action) String() string {
	return proto.EnumName(RBAC_Action_name, int32(x))
}

func (RBAC_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{3, 0}
}

// InvokeRpcService only return match if service_name & method_name match at the same time
type InvokeRpcService struct {
	// Match the `service` field in the rpc header, example: com.alipay.rpc.common.service.facade.SampleService:1.0
	ServiceName *StringMatcherConf `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// default value is empty string
	MethodName *StringMatcherConf `protobuf:"bytes,2,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	// match service name header key list
	ServiceNameKeyList   []string `protobuf:"bytes,3,rep,name=service_name_key_list,json=serviceNameKeyList,proto3" json:"service_name_key_list,omitempty"`
	MethodNameKeyList    []string `protobuf:"bytes,4,rep,name=method_name_key_list,json=methodNameKeyList,proto3" json:"method_name_key_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvokeRpcService) Reset()         { *m = InvokeRpcService{} }
func (m *InvokeRpcService) String() string { return proto.CompactTextString(m) }
func (*InvokeRpcService) ProtoMessage()    {}
func (*InvokeRpcService) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{0}
}
func (m *InvokeRpcService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvokeRpcService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvokeRpcService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvokeRpcService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeRpcService.Merge(m, src)
}
func (m *InvokeRpcService) XXX_Size() int {
	return m.Size()
}
func (m *InvokeRpcService) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeRpcService.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeRpcService proto.InternalMessageInfo

func (m *InvokeRpcService) GetServiceName() *StringMatcherConf {
	if m != nil {
		return m.ServiceName
	}
	return nil
}

func (m *InvokeRpcService) GetMethodName() *StringMatcherConf {
	if m != nil {
		return m.MethodName
	}
	return nil
}

func (m *InvokeRpcService) GetServiceNameKeyList() []string {
	if m != nil {
		return m.ServiceNameKeyList
	}
	return nil
}

func (m *InvokeRpcService) GetMethodNameKeyList() []string {
	if m != nil {
		return m.MethodNameKeyList
	}
	return nil
}

type InvokeAppIdentity struct {
	// Try to fetch the invoker identity from request context or TLS information
	AppName *StringMatcherConf `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// If specified, the match result will be inverted before checking. Defaults to false.
	InvertMatch bool `protobuf:"varint,2,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	// match app name header key list
	AppNameKeyList       []string `protobuf:"bytes,3,rep,name=app_name_key_list,json=appNameKeyList,proto3" json:"app_name_key_list,omitempty"`
	MtlsMatch            bool     `protobuf:"varint,4,opt,name=mtls_match,json=mtlsMatch,proto3" json:"mtls_match,omitempty"`
	StrictMatch          bool     `protobuf:"varint,5,opt,name=strict_match,json=strictMatch,proto3" json:"strict_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvokeAppIdentity) Reset()         { *m = InvokeAppIdentity{} }
func (m *InvokeAppIdentity) String() string { return proto.CompactTextString(m) }
func (*InvokeAppIdentity) ProtoMessage()    {}
func (*InvokeAppIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{1}
}
func (m *InvokeAppIdentity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvokeAppIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvokeAppIdentity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvokeAppIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeAppIdentity.Merge(m, src)
}
func (m *InvokeAppIdentity) XXX_Size() int {
	return m.Size()
}
func (m *InvokeAppIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeAppIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeAppIdentity proto.InternalMessageInfo

func (m *InvokeAppIdentity) GetAppName() *StringMatcherConf {
	if m != nil {
		return m.AppName
	}
	return nil
}

func (m *InvokeAppIdentity) GetInvertMatch() bool {
	if m != nil {
		return m.InvertMatch
	}
	return false
}

func (m *InvokeAppIdentity) GetAppNameKeyList() []string {
	if m != nil {
		return m.AppNameKeyList
	}
	return nil
}

func (m *InvokeAppIdentity) GetMtlsMatch() bool {
	if m != nil {
		return m.MtlsMatch
	}
	return false
}

func (m *InvokeAppIdentity) GetStrictMatch() bool {
	if m != nil {
		return m.StrictMatch
	}
	return false
}

type StrictMTLSConf struct {
	// whether enable strict mTLS check, default to false, same as enable, compatible pb
	EnableStrictMtls bool `protobuf:"varint,1,opt,name=enable_strict_mtls,json=enableStrictMtls,proto3" json:"enable_strict_mtls,omitempty"`
	// The services which must use mTLS to invoke
	CheckServiceList []*StringMatcherConf `protobuf:"bytes,2,rep,name=check_service_list,json=checkServiceList,proto3" json:"check_service_list,omitempty"`
	// whether enable strict mTLS check, default to false
	Enable bool `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	// match service name header key list
	ServiceNameKeyList   []string `protobuf:"bytes,4,rep,name=service_name_key_list,json=serviceNameKeyList,proto3" json:"service_name_key_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StrictMTLSConf) Reset()         { *m = StrictMTLSConf{} }
func (m *StrictMTLSConf) String() string { return proto.CompactTextString(m) }
func (*StrictMTLSConf) ProtoMessage()    {}
func (*StrictMTLSConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{2}
}
func (m *StrictMTLSConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrictMTLSConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrictMTLSConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrictMTLSConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrictMTLSConf.Merge(m, src)
}
func (m *StrictMTLSConf) XXX_Size() int {
	return m.Size()
}
func (m *StrictMTLSConf) XXX_DiscardUnknown() {
	xxx_messageInfo_StrictMTLSConf.DiscardUnknown(m)
}

var xxx_messageInfo_StrictMTLSConf proto.InternalMessageInfo

func (m *StrictMTLSConf) GetEnableStrictMtls() bool {
	if m != nil {
		return m.EnableStrictMtls
	}
	return false
}

func (m *StrictMTLSConf) GetCheckServiceList() []*StringMatcherConf {
	if m != nil {
		return m.CheckServiceList
	}
	return nil
}

func (m *StrictMTLSConf) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *StrictMTLSConf) GetServiceNameKeyList() []string {
	if m != nil {
		return m.ServiceNameKeyList
	}
	return nil
}

type RBAC struct {
	// The action to take if a policy matches. The request is allowed if and only if:
	//
	//   * `action` is "ALLOWED" and at least one policy matches
	//   * `action` is "DENY" and none of the policies match
	Action RBAC_Action `protobuf:"varint,1,opt,name=action,proto3,enum=meshapi.security.rbac.v1.RBAC_Action" json:"action,omitempty"`
	// Maps from policy name to policy. A match occurs when at least one policy matches the request.
	Policies map[string]*RBACPolicyConf `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Check the mTLS, this field is not affected by `action`
	StrictMtls           *StrictMTLSConf `protobuf:"bytes,6,opt,name=strict_mtls,json=strictMtls,proto3" json:"strict_mtls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RBAC) Reset()         { *m = RBAC{} }
func (m *RBAC) String() string { return proto.CompactTextString(m) }
func (*RBAC) ProtoMessage()    {}
func (*RBAC) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{3}
}
func (m *RBAC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBAC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBAC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBAC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBAC.Merge(m, src)
}
func (m *RBAC) XXX_Size() int {
	return m.Size()
}
func (m *RBAC) XXX_DiscardUnknown() {
	xxx_messageInfo_RBAC.DiscardUnknown(m)
}

var xxx_messageInfo_RBAC proto.InternalMessageInfo

func (m *RBAC) GetAction() RBAC_Action {
	if m != nil {
		return m.Action
	}
	return RBAC_DENY
}

func (m *RBAC) GetPolicies() map[string]*RBACPolicyConf {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *RBAC) GetStrictMtls() *StrictMTLSConf {
	if m != nil {
		return m.StrictMtls
	}
	return nil
}

// Policy specifies a role and the principals that are assigned/denied the role. A policy matches if
// and only if at least one of its permissions match the action taking place AND at least one of its
// principals match the downstream.
type RBACPolicyConf struct {
	// Required. The set of permissions that define a role. Each permission is matched with OR
	// semantics. To match all actions for this policy, a single Permission with the `any` field set
	// to true should be used.
	Permissions []*PermissionConf `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Required. The set of principals that are assigned/denied the role based on “action”. Each
	// principal is matched with OR semantics. To match all downstreams for this policy, a single
	// Principal with the `any` field set to true should be used.
	Principals           []*PrincipalConf `protobuf:"bytes,2,rep,name=principals,proto3" json:"principals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RBACPolicyConf) Reset()         { *m = RBACPolicyConf{} }
func (m *RBACPolicyConf) String() string { return proto.CompactTextString(m) }
func (*RBACPolicyConf) ProtoMessage()    {}
func (*RBACPolicyConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{4}
}
func (m *RBACPolicyConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RBACPolicyConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RBACPolicyConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RBACPolicyConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RBACPolicyConf.Merge(m, src)
}
func (m *RBACPolicyConf) XXX_Size() int {
	return m.Size()
}
func (m *RBACPolicyConf) XXX_DiscardUnknown() {
	xxx_messageInfo_RBACPolicyConf.DiscardUnknown(m)
}

var xxx_messageInfo_RBACPolicyConf proto.InternalMessageInfo

func (m *RBACPolicyConf) GetPermissions() []*PermissionConf {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *RBACPolicyConf) GetPrincipals() []*PrincipalConf {
	if m != nil {
		return m.Principals
	}
	return nil
}

// Permission defines an action (or actions) that a principal can take.
type PermissionConf struct {
	// Types that are valid to be assigned to Rule:
	//	*PermissionConf_AndRules
	//	*PermissionConf_OrRules
	//	*PermissionConf_Any
	//	*PermissionConf_Header
	//	*PermissionConf_DestinationIp
	//	*PermissionConf_DestinationPort
	//	*PermissionConf_RpcService
	//	*PermissionConf_ProviderAppname
	Rule                 isPermissionConf_Rule `protobuf_oneof:"rule"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PermissionConf) Reset()         { *m = PermissionConf{} }
func (m *PermissionConf) String() string { return proto.CompactTextString(m) }
func (*PermissionConf) ProtoMessage()    {}
func (*PermissionConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{5}
}
func (m *PermissionConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermissionConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionConf.Merge(m, src)
}
func (m *PermissionConf) XXX_Size() int {
	return m.Size()
}
func (m *PermissionConf) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionConf.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionConf proto.InternalMessageInfo

type isPermissionConf_Rule interface {
	isPermissionConf_Rule()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PermissionConf_AndRules struct {
	AndRules *PermissionConf_Set `protobuf:"bytes,1,opt,name=and_rules,json=andRules,proto3,oneof" json:"and_rules,omitempty"`
}
type PermissionConf_OrRules struct {
	OrRules *PermissionConf_Set `protobuf:"bytes,2,opt,name=or_rules,json=orRules,proto3,oneof" json:"or_rules,omitempty"`
}
type PermissionConf_Any struct {
	Any bool `protobuf:"varint,3,opt,name=any,proto3,oneof" json:"any,omitempty"`
}
type PermissionConf_Header struct {
	Header *HeaderMatcherConf `protobuf:"bytes,4,opt,name=header,proto3,oneof" json:"header,omitempty"`
}
type PermissionConf_DestinationIp struct {
	DestinationIp *CidrRange `protobuf:"bytes,5,opt,name=destination_ip,json=destinationIp,proto3,oneof" json:"destination_ip,omitempty"`
}
type PermissionConf_DestinationPort struct {
	DestinationPort uint32 `protobuf:"varint,6,opt,name=destination_port,json=destinationPort,proto3,oneof" json:"destination_port,omitempty"`
}
type PermissionConf_RpcService struct {
	RpcService *InvokeRpcService `protobuf:"bytes,7,opt,name=rpc_service,json=rpcService,proto3,oneof" json:"rpc_service,omitempty"`
}
type PermissionConf_ProviderAppname struct {
	ProviderAppname *StringMatcherConf `protobuf:"bytes,8,opt,name=provider_appname,json=providerAppname,proto3,oneof" json:"provider_appname,omitempty"`
}

func (*PermissionConf_AndRules) isPermissionConf_Rule()        {}
func (*PermissionConf_OrRules) isPermissionConf_Rule()         {}
func (*PermissionConf_Any) isPermissionConf_Rule()             {}
func (*PermissionConf_Header) isPermissionConf_Rule()          {}
func (*PermissionConf_DestinationIp) isPermissionConf_Rule()   {}
func (*PermissionConf_DestinationPort) isPermissionConf_Rule() {}
func (*PermissionConf_RpcService) isPermissionConf_Rule()      {}
func (*PermissionConf_ProviderAppname) isPermissionConf_Rule() {}

func (m *PermissionConf) GetRule() isPermissionConf_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *PermissionConf) GetAndRules() *PermissionConf_Set {
	if x, ok := m.GetRule().(*PermissionConf_AndRules); ok {
		return x.AndRules
	}
	return nil
}

func (m *PermissionConf) GetOrRules() *PermissionConf_Set {
	if x, ok := m.GetRule().(*PermissionConf_OrRules); ok {
		return x.OrRules
	}
	return nil
}

func (m *PermissionConf) GetAny() bool {
	if x, ok := m.GetRule().(*PermissionConf_Any); ok {
		return x.Any
	}
	return false
}

func (m *PermissionConf) GetHeader() *HeaderMatcherConf {
	if x, ok := m.GetRule().(*PermissionConf_Header); ok {
		return x.Header
	}
	return nil
}

func (m *PermissionConf) GetDestinationIp() *CidrRange {
	if x, ok := m.GetRule().(*PermissionConf_DestinationIp); ok {
		return x.DestinationIp
	}
	return nil
}

func (m *PermissionConf) GetDestinationPort() uint32 {
	if x, ok := m.GetRule().(*PermissionConf_DestinationPort); ok {
		return x.DestinationPort
	}
	return 0
}

func (m *PermissionConf) GetRpcService() *InvokeRpcService {
	if x, ok := m.GetRule().(*PermissionConf_RpcService); ok {
		return x.RpcService
	}
	return nil
}

func (m *PermissionConf) GetProviderAppname() *StringMatcherConf {
	if x, ok := m.GetRule().(*PermissionConf_ProviderAppname); ok {
		return x.ProviderAppname
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PermissionConf) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PermissionConf_AndRules)(nil),
		(*PermissionConf_OrRules)(nil),
		(*PermissionConf_Any)(nil),
		(*PermissionConf_Header)(nil),
		(*PermissionConf_DestinationIp)(nil),
		(*PermissionConf_DestinationPort)(nil),
		(*PermissionConf_RpcService)(nil),
		(*PermissionConf_ProviderAppname)(nil),
	}
}

// Used in the `and_rules` and `or_rules` fields in the `rule` oneof. Depending on the context,
// each are applied with the associated behavior.
type PermissionConf_Set struct {
	Rules                []*PermissionConf `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PermissionConf_Set) Reset()         { *m = PermissionConf_Set{} }
func (m *PermissionConf_Set) String() string { return proto.CompactTextString(m) }
func (*PermissionConf_Set) ProtoMessage()    {}
func (*PermissionConf_Set) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{5, 0}
}
func (m *PermissionConf_Set) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionConf_Set) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionConf_Set.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermissionConf_Set) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionConf_Set.Merge(m, src)
}
func (m *PermissionConf_Set) XXX_Size() int {
	return m.Size()
}
func (m *PermissionConf_Set) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionConf_Set.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionConf_Set proto.InternalMessageInfo

func (m *PermissionConf_Set) GetRules() []*PermissionConf {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Principal defines an identity or a group of identities for a downstream subject.
type PrincipalConf struct {
	// Types that are valid to be assigned to Identifier:
	//	*PrincipalConf_AndIds
	//	*PrincipalConf_OrIds
	//	*PrincipalConf_Any
	//	*PrincipalConf_SourceIp
	//	*PrincipalConf_Header
	//	*PrincipalConf_AppIdentity
	Identifier           isPrincipalConf_Identifier `protobuf_oneof:"identifier"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PrincipalConf) Reset()         { *m = PrincipalConf{} }
func (m *PrincipalConf) String() string { return proto.CompactTextString(m) }
func (*PrincipalConf) ProtoMessage()    {}
func (*PrincipalConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{6}
}
func (m *PrincipalConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrincipalConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrincipalConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrincipalConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrincipalConf.Merge(m, src)
}
func (m *PrincipalConf) XXX_Size() int {
	return m.Size()
}
func (m *PrincipalConf) XXX_DiscardUnknown() {
	xxx_messageInfo_PrincipalConf.DiscardUnknown(m)
}

var xxx_messageInfo_PrincipalConf proto.InternalMessageInfo

type isPrincipalConf_Identifier interface {
	isPrincipalConf_Identifier()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrincipalConf_AndIds struct {
	AndIds *PrincipalConf_Set `protobuf:"bytes,1,opt,name=and_ids,json=andIds,proto3,oneof" json:"and_ids,omitempty"`
}
type PrincipalConf_OrIds struct {
	OrIds *PrincipalConf_Set `protobuf:"bytes,2,opt,name=or_ids,json=orIds,proto3,oneof" json:"or_ids,omitempty"`
}
type PrincipalConf_Any struct {
	Any bool `protobuf:"varint,3,opt,name=any,proto3,oneof" json:"any,omitempty"`
}
type PrincipalConf_SourceIp struct {
	SourceIp *CidrRange `protobuf:"bytes,4,opt,name=source_ip,json=sourceIp,proto3,oneof" json:"source_ip,omitempty"`
}
type PrincipalConf_Header struct {
	Header *HeaderMatcherConf `protobuf:"bytes,5,opt,name=header,proto3,oneof" json:"header,omitempty"`
}
type PrincipalConf_AppIdentity struct {
	AppIdentity *InvokeAppIdentity `protobuf:"bytes,6,opt,name=app_identity,json=appIdentity,proto3,oneof" json:"app_identity,omitempty"`
}

func (*PrincipalConf_AndIds) isPrincipalConf_Identifier()      {}
func (*PrincipalConf_OrIds) isPrincipalConf_Identifier()       {}
func (*PrincipalConf_Any) isPrincipalConf_Identifier()         {}
func (*PrincipalConf_SourceIp) isPrincipalConf_Identifier()    {}
func (*PrincipalConf_Header) isPrincipalConf_Identifier()      {}
func (*PrincipalConf_AppIdentity) isPrincipalConf_Identifier() {}

func (m *PrincipalConf) GetIdentifier() isPrincipalConf_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *PrincipalConf) GetAndIds() *PrincipalConf_Set {
	if x, ok := m.GetIdentifier().(*PrincipalConf_AndIds); ok {
		return x.AndIds
	}
	return nil
}

func (m *PrincipalConf) GetOrIds() *PrincipalConf_Set {
	if x, ok := m.GetIdentifier().(*PrincipalConf_OrIds); ok {
		return x.OrIds
	}
	return nil
}

func (m *PrincipalConf) GetAny() bool {
	if x, ok := m.GetIdentifier().(*PrincipalConf_Any); ok {
		return x.Any
	}
	return false
}

func (m *PrincipalConf) GetSourceIp() *CidrRange {
	if x, ok := m.GetIdentifier().(*PrincipalConf_SourceIp); ok {
		return x.SourceIp
	}
	return nil
}

func (m *PrincipalConf) GetHeader() *HeaderMatcherConf {
	if x, ok := m.GetIdentifier().(*PrincipalConf_Header); ok {
		return x.Header
	}
	return nil
}

func (m *PrincipalConf) GetAppIdentity() *InvokeAppIdentity {
	if x, ok := m.GetIdentifier().(*PrincipalConf_AppIdentity); ok {
		return x.AppIdentity
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrincipalConf) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrincipalConf_AndIds)(nil),
		(*PrincipalConf_OrIds)(nil),
		(*PrincipalConf_Any)(nil),
		(*PrincipalConf_SourceIp)(nil),
		(*PrincipalConf_Header)(nil),
		(*PrincipalConf_AppIdentity)(nil),
	}
}

// Used in the `and_ids` and `or_ids` fields in the `identifier` oneof. Depending on the context,
// each are applied with the associated behavior.
type PrincipalConf_Set struct {
	Ids                  []*PrincipalConf `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PrincipalConf_Set) Reset()         { *m = PrincipalConf_Set{} }
func (m *PrincipalConf_Set) String() string { return proto.CompactTextString(m) }
func (*PrincipalConf_Set) ProtoMessage()    {}
func (*PrincipalConf_Set) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88ffdd966c9c7ed, []int{6, 0}
}
func (m *PrincipalConf_Set) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrincipalConf_Set) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrincipalConf_Set.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrincipalConf_Set) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrincipalConf_Set.Merge(m, src)
}
func (m *PrincipalConf_Set) XXX_Size() int {
	return m.Size()
}
func (m *PrincipalConf_Set) XXX_DiscardUnknown() {
	xxx_messageInfo_PrincipalConf_Set.DiscardUnknown(m)
}

var xxx_messageInfo_PrincipalConf_Set proto.InternalMessageInfo

func (m *PrincipalConf_Set) GetIds() []*PrincipalConf {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterEnum("meshapi.security.rbac.v1.RBAC_Action", RBAC_Action_name, RBAC_Action_value)
	proto.RegisterType((*InvokeRpcService)(nil), "meshapi.security.rbac.v1.InvokeRpcService")
	proto.RegisterType((*InvokeAppIdentity)(nil), "meshapi.security.rbac.v1.InvokeAppIdentity")
	proto.RegisterType((*StrictMTLSConf)(nil), "meshapi.security.rbac.v1.StrictMTLSConf")
	proto.RegisterType((*RBAC)(nil), "meshapi.security.rbac.v1.RBAC")
	proto.RegisterMapType((map[string]*RBACPolicyConf)(nil), "meshapi.security.rbac.v1.RBAC.PoliciesEntry")
	proto.RegisterType((*RBACPolicyConf)(nil), "meshapi.security.rbac.v1.RBACPolicyConf")
	proto.RegisterType((*PermissionConf)(nil), "meshapi.security.rbac.v1.PermissionConf")
	proto.RegisterType((*PermissionConf_Set)(nil), "meshapi.security.rbac.v1.PermissionConf.Set")
	proto.RegisterType((*PrincipalConf)(nil), "meshapi.security.rbac.v1.PrincipalConf")
	proto.RegisterType((*PrincipalConf_Set)(nil), "meshapi.security.rbac.v1.PrincipalConf.Set")
}

func init() { proto.RegisterFile("rbac.proto", fileDescriptor_f88ffdd966c9c7ed) }

var fileDescriptor_f88ffdd966c9c7ed = []byte{
	// 915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0xe3, 0xc4, 0x75, 0x8e, 0xdb, 0x90, 0x8e, 0xf8, 0x89, 0x2a, 0x6d, 0xd5, 0x0d, 0x42,
	0x14, 0x5a, 0x05, 0x6d, 0xb9, 0x01, 0x24, 0x10, 0x49, 0xb7, 0x8b, 0xc3, 0x66, 0x4b, 0x35, 0x41,
	0x82, 0xe5, 0xc6, 0x9a, 0xda, 0xb3, 0x9b, 0x51, 0x1d, 0x7b, 0x34, 0x33, 0x8d, 0xe4, 0xf7, 0xe0,
	0x82, 0x17, 0xe0, 0x5d, 0xb8, 0xe4, 0x09, 0xd0, 0xaa, 0x70, 0xc7, 0x3d, 0xd7, 0xc8, 0x33, 0x76,
	0xe3, 0xac, 0x48, 0x4a, 0xba, 0x77, 0x9e, 0x99, 0xf3, 0x7d, 0xe7, 0x67, 0xbe, 0x39, 0xc7, 0x00,
	0xe2, 0x92, 0x84, 0x7d, 0x2e, 0x52, 0x95, 0xa2, 0xee, 0x8c, 0xca, 0x29, 0xe1, 0xac, 0x2f, 0x69,
	0x78, 0x2d, 0x98, 0xca, 0xfa, 0xfa, 0x70, 0xfe, 0x68, 0x0f, 0x2e, 0x89, 0xa4, 0xc6, 0xaa, 0xf7,
	0x73, 0x1d, 0x3a, 0xa3, 0x64, 0x9e, 0x5e, 0x51, 0xcc, 0xc3, 0x09, 0x15, 0x73, 0x16, 0x52, 0x74,
	0x0e, 0xdb, 0xd2, 0x7c, 0x06, 0x09, 0x99, 0xd1, 0xae, 0x75, 0x60, 0x1d, 0x7a, 0x27, 0x47, 0xfd,
	0x55, 0x8c, 0xfd, 0x89, 0x12, 0x2c, 0x79, 0xf9, 0x8c, 0xa8, 0x70, 0x4a, 0xc5, 0x69, 0x9a, 0xbc,
	0xc0, 0x5e, 0x41, 0x70, 0x4e, 0x66, 0x14, 0x8d, 0xc1, 0x9b, 0x51, 0x35, 0x4d, 0x23, 0x43, 0x57,
	0xdf, 0x9c, 0x0e, 0x0c, 0x5e, 0xb3, 0x3d, 0x82, 0x77, 0xaa, 0xd1, 0x05, 0x57, 0x34, 0x0b, 0x62,
	0x26, 0x55, 0xd7, 0x3e, 0xb0, 0x0f, 0x5b, 0x18, 0x55, 0x3c, 0x3f, 0xa5, 0xd9, 0x98, 0x49, 0x85,
	0x3e, 0x81, 0xb7, 0x2b, 0x01, 0x2c, 0x10, 0x0d, 0x8d, 0xd8, 0x5d, 0x90, 0x17, 0x80, 0xde, 0xdf,
	0x16, 0xec, 0x9a, 0xb2, 0x0c, 0x38, 0x1f, 0x45, 0x34, 0x51, 0x4c, 0x65, 0xe8, 0x09, 0xb8, 0x84,
	0xf3, 0x7b, 0xd7, 0x64, 0x8b, 0x70, 0xae, 0x33, 0x78, 0x08, 0xdb, 0x2c, 0x99, 0x53, 0xa1, 0x82,
	0x59, 0x7e, 0xac, 0x0b, 0xe2, 0x62, 0xcf, 0xec, 0x69, 0x04, 0xfa, 0x08, 0x76, 0x4b, 0x57, 0xaf,
	0x27, 0xd8, 0x2e, 0x68, 0xca, 0xe4, 0x1e, 0x00, 0xcc, 0x54, 0x2c, 0x0b, 0xae, 0x86, 0xe6, 0x6a,
	0xe5, 0x3b, 0x86, 0xe9, 0x21, 0x6c, 0x4b, 0x25, 0x58, 0x58, 0x3a, 0x6b, 0x1a, 0x67, 0x66, 0x4f,
	0x9b, 0xf4, 0xfe, 0xb2, 0xa0, 0x3d, 0x31, 0xeb, 0xef, 0xc7, 0x93, 0x3c, 0x56, 0x74, 0x0c, 0x88,
	0x26, 0xe4, 0x32, 0xa6, 0x41, 0x09, 0x56, 0xb1, 0xd4, 0x49, 0xbb, 0xb8, 0x63, 0x4e, 0x0a, 0x84,
	0x8a, 0x25, 0x7a, 0x0e, 0x28, 0x9c, 0xd2, 0xf0, 0x2a, 0x28, 0x2f, 0x46, 0x87, 0x5b, 0x3f, 0xb0,
	0x37, 0x2d, 0x51, 0x47, 0xd3, 0x14, 0x3a, 0xd4, 0xd9, 0xbd, 0x0b, 0x8e, 0x71, 0xd7, 0xb5, 0xb5,
	0xf3, 0x62, 0xb5, 0x5a, 0x05, 0x8d, 0x55, 0x2a, 0xe8, 0xbd, 0xaa, 0x43, 0x03, 0x0f, 0x07, 0xa7,
	0xe8, 0x4b, 0x70, 0x48, 0xa8, 0x58, 0x9a, 0xe8, 0x84, 0xda, 0x27, 0x1f, 0xac, 0x0e, 0x31, 0xb7,
	0xef, 0x0f, 0xb4, 0x31, 0x2e, 0x40, 0xc8, 0x07, 0x97, 0xa7, 0x31, 0x0b, 0x19, 0x95, 0x45, 0x8e,
	0xc7, 0x77, 0x10, 0x5c, 0x14, 0xe6, 0x67, 0x89, 0x12, 0x19, 0xbe, 0x45, 0xa3, 0x11, 0x78, 0xd5,
	0xf2, 0x3a, 0x5a, 0x53, 0x87, 0xeb, 0x0b, 0xb6, 0xb8, 0x24, 0x0c, 0xf2, 0xf6, 0x0a, 0xf6, 0x28,
	0xec, 0x2c, 0x79, 0x41, 0x1d, 0xb0, 0xaf, 0x68, 0xa6, 0x33, 0x6c, 0xe1, 0xfc, 0x13, 0x7d, 0x05,
	0xcd, 0x39, 0x89, 0xaf, 0xcb, 0x07, 0x78, 0xb8, 0x3e, 0x68, 0xcd, 0x96, 0x69, 0x3f, 0x06, 0xf6,
	0x45, 0xfd, 0x33, 0xab, 0xf7, 0x00, 0x1c, 0x53, 0x0d, 0xe4, 0x42, 0xe3, 0xf1, 0xd9, 0xf9, 0xf3,
	0x4e, 0x0d, 0xb5, 0xa0, 0x39, 0x18, 0x8f, 0xbf, 0xfb, 0xa1, 0x63, 0xf5, 0x7e, 0xb5, 0xa0, 0xbd,
	0x0c, 0x46, 0xdf, 0x82, 0xc7, 0xa9, 0x98, 0x31, 0x29, 0x59, 0x9a, 0xe4, 0x12, 0xb2, 0xd7, 0xfb,
	0xbe, 0xb8, 0x35, 0x36, 0x8d, 0xa4, 0x02, 0x46, 0xdf, 0x00, 0x70, 0xc1, 0x92, 0x90, 0x71, 0x12,
	0x97, 0xb5, 0xff, 0x70, 0x0d, 0x55, 0x69, 0x6b, 0xaa, 0xb5, 0x80, 0xf6, 0xfe, 0x69, 0x40, 0x7b,
	0xd9, 0x11, 0x7a, 0x0a, 0x2d, 0x92, 0x44, 0x81, 0xb8, 0x8e, 0xa9, 0x2c, 0x5e, 0xf7, 0xf1, 0xff,
	0x8d, 0xb2, 0x3f, 0xa1, 0xca, 0xaf, 0x61, 0x97, 0x24, 0x11, 0xce, 0xf1, 0x68, 0x04, 0x6e, 0x2a,
	0x0a, 0xae, 0xfa, 0xbd, 0xb8, 0xb6, 0x52, 0x61, 0xa8, 0x10, 0xd8, 0x24, 0xc9, 0x8c, 0xfa, 0xfd,
	0x1a, 0xce, 0x17, 0xe8, 0x0c, 0x9c, 0x29, 0x25, 0x11, 0x15, 0xfa, 0xb9, 0xaf, 0x7d, 0x63, 0xbe,
	0xb6, 0xab, 0xbc, 0x31, 0xbf, 0x86, 0x0b, 0x30, 0x1a, 0x43, 0x3b, 0xa2, 0x52, 0xb1, 0x84, 0xe4,
	0x37, 0x1a, 0x30, 0xae, 0x9b, 0x83, 0x77, 0xf2, 0xfe, 0x6a, 0xba, 0x53, 0x16, 0x09, 0x4c, 0x92,
	0x97, 0xd4, 0xaf, 0xe1, 0x9d, 0x0a, 0x78, 0xc4, 0xd1, 0x11, 0x74, 0xaa, 0x6c, 0x3c, 0x15, 0x4a,
	0x2b, 0x7a, 0xc7, 0xaf, 0xe1, 0xb7, 0x2a, 0x27, 0x17, 0xa9, 0x50, 0xe8, 0x19, 0x78, 0x82, 0x87,
	0x65, 0xbf, 0xe8, 0x6e, 0x69, 0xbf, 0x1f, 0xaf, 0xf6, 0xfb, 0xfa, 0x8c, 0xf2, 0x6b, 0x18, 0xc4,
	0x62, 0x62, 0xfd, 0x08, 0x1d, 0x2e, 0xd2, 0x39, 0x8b, 0xa8, 0x08, 0x08, 0xe7, 0xba, 0x43, 0xbb,
	0x1b, 0x77, 0xe8, 0x3c, 0xd0, 0x92, 0x66, 0x60, 0x58, 0xf6, 0xce, 0xc0, 0x9e, 0x50, 0x95, 0xbf,
	0x9d, 0x52, 0x19, 0x9b, 0xe9, 0xd7, 0xc0, 0x86, 0x0e, 0x34, 0xf2, 0x8f, 0xde, 0x1f, 0x36, 0xec,
	0x2c, 0xc9, 0x12, 0x3d, 0x81, 0xad, 0x5c, 0x77, 0x2c, 0x92, 0x77, 0xcf, 0x94, 0x25, 0x64, 0x21,
	0x14, 0x87, 0x24, 0xd1, 0x28, 0x92, 0xe8, 0x31, 0x38, 0xa9, 0xd0, 0x34, 0xf5, 0xfb, 0xd0, 0x34,
	0x53, 0x91, 0xb3, 0xfc, 0x97, 0xda, 0x86, 0xd0, 0x92, 0xe9, 0xb5, 0x08, 0x69, 0xae, 0x90, 0xc6,
	0x26, 0x0a, 0x71, 0x0d, 0x6e, 0xc4, 0x2b, 0x8a, 0x6d, 0xbe, 0x89, 0x62, 0x2f, 0x60, 0x3b, 0x1f,
	0x8b, 0xac, 0x98, 0xc8, 0x45, 0xc7, 0x3c, 0xba, 0x4b, 0x37, 0x95, 0x21, 0xee, 0xd7, 0xb0, 0x47,
	0x16, 0xcb, 0xbd, 0xaf, 0xcd, 0xfd, 0x7e, 0x0e, 0xb6, 0xb9, 0x81, 0x8d, 0x5a, 0x4a, 0x8e, 0x19,
	0x6e, 0x03, 0x98, 0x78, 0x5e, 0x30, 0x2a, 0x86, 0xef, 0xfd, 0x76, 0xb3, 0x6f, 0xfd, 0x7e, 0xb3,
	0x6f, 0xbd, 0xba, 0xd9, 0xb7, 0x7e, 0xf9, 0x73, 0xbf, 0xf6, 0x53, 0x53, 0x65, 0x9c, 0xca, 0x4b,
	0x47, 0xff, 0x70, 0x7d, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x4e, 0x46, 0xaf, 0xa4,
	0x09, 0x00, 0x00,
}

func (m *InvokeRpcService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvokeRpcService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvokeRpcService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MethodNameKeyList) > 0 {
		for iNdEx := len(m.MethodNameKeyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MethodNameKeyList[iNdEx])
			copy(dAtA[i:], m.MethodNameKeyList[iNdEx])
			i = encodeVarintRbac(dAtA, i, uint64(len(m.MethodNameKeyList[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ServiceNameKeyList) > 0 {
		for iNdEx := len(m.ServiceNameKeyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceNameKeyList[iNdEx])
			copy(dAtA[i:], m.ServiceNameKeyList[iNdEx])
			i = encodeVarintRbac(dAtA, i, uint64(len(m.ServiceNameKeyList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MethodName != nil {
		{
			size, err := m.MethodName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceName != nil {
		{
			size, err := m.ServiceName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvokeAppIdentity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvokeAppIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvokeAppIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StrictMatch {
		i--
		if m.StrictMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MtlsMatch {
		i--
		if m.MtlsMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.AppNameKeyList) > 0 {
		for iNdEx := len(m.AppNameKeyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AppNameKeyList[iNdEx])
			copy(dAtA[i:], m.AppNameKeyList[iNdEx])
			i = encodeVarintRbac(dAtA, i, uint64(len(m.AppNameKeyList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.InvertMatch {
		i--
		if m.InvertMatch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AppName != nil {
		{
			size, err := m.AppName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StrictMTLSConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrictMTLSConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StrictMTLSConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceNameKeyList) > 0 {
		for iNdEx := len(m.ServiceNameKeyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceNameKeyList[iNdEx])
			copy(dAtA[i:], m.ServiceNameKeyList[iNdEx])
			i = encodeVarintRbac(dAtA, i, uint64(len(m.ServiceNameKeyList[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.CheckServiceList) > 0 {
		for iNdEx := len(m.CheckServiceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckServiceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbac(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EnableStrictMtls {
		i--
		if m.EnableStrictMtls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RBAC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBAC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBAC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StrictMtls != nil {
		{
			size, err := m.StrictMtls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Policies) > 0 {
		for k := range m.Policies {
			v := m.Policies[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRbac(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRbac(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRbac(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Action != 0 {
		i = encodeVarintRbac(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RBACPolicyConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RBACPolicyConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RBACPolicyConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Principals) > 0 {
		for iNdEx := len(m.Principals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Principals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbac(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Permissions) > 0 {
		for iNdEx := len(m.Permissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Permissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbac(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PermissionConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Rule != nil {
		{
			size := m.Rule.Size()
			i -= size
			if _, err := m.Rule.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PermissionConf_AndRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf_AndRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AndRules != nil {
		{
			size, err := m.AndRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PermissionConf_OrRules) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf_OrRules) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OrRules != nil {
		{
			size, err := m.OrRules.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PermissionConf_Any) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf_Any) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Any {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *PermissionConf_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PermissionConf_DestinationIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf_DestinationIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DestinationIp != nil {
		{
			size, err := m.DestinationIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PermissionConf_DestinationPort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf_DestinationPort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintRbac(dAtA, i, uint64(m.DestinationPort))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *PermissionConf_RpcService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf_RpcService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RpcService != nil {
		{
			size, err := m.RpcService.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PermissionConf_ProviderAppname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf_ProviderAppname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ProviderAppname != nil {
		{
			size, err := m.ProviderAppname.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *PermissionConf_Set) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionConf_Set) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionConf_Set) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbac(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrincipalConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrincipalConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrincipalConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Identifier != nil {
		{
			size := m.Identifier.Size()
			i -= size
			if _, err := m.Identifier.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrincipalConf_AndIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrincipalConf_AndIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AndIds != nil {
		{
			size, err := m.AndIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PrincipalConf_OrIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrincipalConf_OrIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OrIds != nil {
		{
			size, err := m.OrIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PrincipalConf_Any) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrincipalConf_Any) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Any {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *PrincipalConf_SourceIp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrincipalConf_SourceIp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SourceIp != nil {
		{
			size, err := m.SourceIp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PrincipalConf_Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrincipalConf_Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PrincipalConf_AppIdentity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrincipalConf_AppIdentity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AppIdentity != nil {
		{
			size, err := m.AppIdentity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRbac(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PrincipalConf_Set) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrincipalConf_Set) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrincipalConf_Set) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRbac(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRbac(dAtA []byte, offset int, v uint64) int {
	offset -= sovRbac(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InvokeRpcService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceName != nil {
		l = m.ServiceName.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	if m.MethodName != nil {
		l = m.MethodName.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	if len(m.ServiceNameKeyList) > 0 {
		for _, s := range m.ServiceNameKeyList {
			l = len(s)
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if len(m.MethodNameKeyList) > 0 {
		for _, s := range m.MethodNameKeyList {
			l = len(s)
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InvokeAppIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppName != nil {
		l = m.AppName.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	if m.InvertMatch {
		n += 2
	}
	if len(m.AppNameKeyList) > 0 {
		for _, s := range m.AppNameKeyList {
			l = len(s)
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if m.MtlsMatch {
		n += 2
	}
	if m.StrictMatch {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StrictMTLSConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableStrictMtls {
		n += 2
	}
	if len(m.CheckServiceList) > 0 {
		for _, e := range m.CheckServiceList {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if m.Enable {
		n += 2
	}
	if len(m.ServiceNameKeyList) > 0 {
		for _, s := range m.ServiceNameKeyList {
			l = len(s)
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RBAC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovRbac(uint64(m.Action))
	}
	if len(m.Policies) > 0 {
		for k, v := range m.Policies {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRbac(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRbac(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRbac(uint64(mapEntrySize))
		}
	}
	if m.StrictMtls != nil {
		l = m.StrictMtls.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RBACPolicyConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for _, e := range m.Permissions {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if len(m.Principals) > 0 {
		for _, e := range m.Principals {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PermissionConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rule != nil {
		n += m.Rule.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PermissionConf_AndRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AndRules != nil {
		l = m.AndRules.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PermissionConf_OrRules) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrRules != nil {
		l = m.OrRules.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PermissionConf_Any) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *PermissionConf_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PermissionConf_DestinationIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationIp != nil {
		l = m.DestinationIp.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PermissionConf_DestinationPort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRbac(uint64(m.DestinationPort))
	return n
}
func (m *PermissionConf_RpcService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RpcService != nil {
		l = m.RpcService.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PermissionConf_ProviderAppname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProviderAppname != nil {
		l = m.ProviderAppname.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PermissionConf_Set) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrincipalConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Identifier != nil {
		n += m.Identifier.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrincipalConf_AndIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AndIds != nil {
		l = m.AndIds.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PrincipalConf_OrIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrIds != nil {
		l = m.OrIds.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PrincipalConf_Any) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *PrincipalConf_SourceIp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceIp != nil {
		l = m.SourceIp.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PrincipalConf_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PrincipalConf_AppIdentity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppIdentity != nil {
		l = m.AppIdentity.Size()
		n += 1 + l + sovRbac(uint64(l))
	}
	return n
}
func (m *PrincipalConf_Set) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			l = e.Size()
			n += 1 + l + sovRbac(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRbac(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRbac(x uint64) (n int) {
	return sovRbac(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InvokeRpcService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvokeRpcService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvokeRpcService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceName == nil {
				m.ServiceName = &StringMatcherConf{}
			}
			if err := m.ServiceName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MethodName == nil {
				m.MethodName = &StringMatcherConf{}
			}
			if err := m.MethodName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceNameKeyList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceNameKeyList = append(m.ServiceNameKeyList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodNameKeyList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodNameKeyList = append(m.MethodNameKeyList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvokeAppIdentity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvokeAppIdentity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvokeAppIdentity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppName == nil {
				m.AppName = &StringMatcherConf{}
			}
			if err := m.AppName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvertMatch = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppNameKeyList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppNameKeyList = append(m.AppNameKeyList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtlsMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MtlsMatch = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrictMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StrictMatch = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrictMTLSConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrictMTLSConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrictMTLSConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableStrictMtls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableStrictMtls = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckServiceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckServiceList = append(m.CheckServiceList, &StringMatcherConf{})
			if err := m.CheckServiceList[len(m.CheckServiceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceNameKeyList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceNameKeyList = append(m.ServiceNameKeyList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBAC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBAC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBAC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= RBAC_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policies == nil {
				m.Policies = make(map[string]*RBACPolicyConf)
			}
			var mapkey string
			var mapvalue *RBACPolicyConf
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRbac
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbac
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRbac
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRbac
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRbac
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRbac
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRbac
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RBACPolicyConf{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRbac(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRbac
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Policies[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrictMtls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StrictMtls == nil {
				m.StrictMtls = &StrictMTLSConf{}
			}
			if err := m.StrictMtls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RBACPolicyConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RBACPolicyConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RBACPolicyConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Permissions = append(m.Permissions, &PermissionConf{})
			if err := m.Permissions[len(m.Permissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Principals = append(m.Principals, &PrincipalConf{})
			if err := m.Principals[len(m.Principals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PermissionConf_Set{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rule = &PermissionConf_AndRules{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PermissionConf_Set{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rule = &PermissionConf_OrRules{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Rule = &PermissionConf_Any{b}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeaderMatcherConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rule = &PermissionConf_Header{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CidrRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rule = &PermissionConf_DestinationIp{v}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPort", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Rule = &PermissionConf_DestinationPort{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcService", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InvokeRpcService{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rule = &PermissionConf_RpcService{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderAppname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringMatcherConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Rule = &PermissionConf_ProviderAppname{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionConf_Set) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Set: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Set: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &PermissionConf{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrincipalConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrincipalConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrincipalConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrincipalConf_Set{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &PrincipalConf_AndIds{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PrincipalConf_Set{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &PrincipalConf_OrIds{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Identifier = &PrincipalConf_Any{b}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CidrRange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &PrincipalConf_SourceIp{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeaderMatcherConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &PrincipalConf_Header{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppIdentity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InvokeAppIdentity{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Identifier = &PrincipalConf_AppIdentity{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrincipalConf_Set) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Set: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Set: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRbac
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRbac
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, &PrincipalConf{})
			if err := m.Ids[len(m.Ids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRbac(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRbac
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRbac(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRbac
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRbac
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRbac
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRbac
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRbac
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRbac        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRbac          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRbac = fmt.Errorf("proto: unexpected end of group")
)
