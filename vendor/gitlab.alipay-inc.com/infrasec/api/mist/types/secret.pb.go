// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: secret.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SecretPluginConfig struct {
	// appname
	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// mist master flag
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	// version
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// report ack address
	ReportUrl string `protobuf:"bytes,4,opt,name=report_url,json=reportUrl,proto3" json:"report_url,omitempty"`
	// local report
	LocalReport bool `protobuf:"varint,5,opt,name=local_report,json=localReport,proto3" json:"local_report,omitempty"`
	// init secret list retry period & count
	InitPeriod     int64 `protobuf:"varint,6,opt,name=init_period,json=initPeriod,proto3" json:"init_period,omitempty"`
	InitRetryCount int64 `protobuf:"varint,7,opt,name=init_retry_count,json=initRetryCount,proto3" json:"init_retry_count,omitempty"`
	// update secret list retry period & count
	UpdatePeriod     int64 `protobuf:"varint,8,opt,name=update_period,json=updatePeriod,proto3" json:"update_period,omitempty"`
	UpdateRetryCount int64 `protobuf:"varint,9,opt,name=update_retry_count,json=updateRetryCount,proto3" json:"update_retry_count,omitempty"`
	// cache max count
	CacheMaxCount int64 `protobuf:"varint,10,opt,name=cache_max_count,json=cacheMaxCount,proto3" json:"cache_max_count,omitempty"`
	// cache max memory size (byte)
	CacheMaxSize int64 `protobuf:"varint,11,opt,name=cache_max_size,json=cacheMaxSize,proto3" json:"cache_max_size,omitempty"`
	// latest secret cache interval
	LatestInterval       int64    `protobuf:"varint,12,opt,name=latest_interval,json=latestInterval,proto3" json:"latest_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SecretPluginConfig) Reset()         { *m = SecretPluginConfig{} }
func (m *SecretPluginConfig) String() string { return proto.CompactTextString(m) }
func (*SecretPluginConfig) ProtoMessage()    {}
func (*SecretPluginConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6acf428160d7a216, []int{0}
}
func (m *SecretPluginConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretPluginConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretPluginConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecretPluginConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretPluginConfig.Merge(m, src)
}
func (m *SecretPluginConfig) XXX_Size() int {
	return m.Size()
}
func (m *SecretPluginConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretPluginConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SecretPluginConfig proto.InternalMessageInfo

func (m *SecretPluginConfig) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *SecretPluginConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *SecretPluginConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SecretPluginConfig) GetReportUrl() string {
	if m != nil {
		return m.ReportUrl
	}
	return ""
}

func (m *SecretPluginConfig) GetLocalReport() bool {
	if m != nil {
		return m.LocalReport
	}
	return false
}

func (m *SecretPluginConfig) GetInitPeriod() int64 {
	if m != nil {
		return m.InitPeriod
	}
	return 0
}

func (m *SecretPluginConfig) GetInitRetryCount() int64 {
	if m != nil {
		return m.InitRetryCount
	}
	return 0
}

func (m *SecretPluginConfig) GetUpdatePeriod() int64 {
	if m != nil {
		return m.UpdatePeriod
	}
	return 0
}

func (m *SecretPluginConfig) GetUpdateRetryCount() int64 {
	if m != nil {
		return m.UpdateRetryCount
	}
	return 0
}

func (m *SecretPluginConfig) GetCacheMaxCount() int64 {
	if m != nil {
		return m.CacheMaxCount
	}
	return 0
}

func (m *SecretPluginConfig) GetCacheMaxSize() int64 {
	if m != nil {
		return m.CacheMaxSize
	}
	return 0
}

func (m *SecretPluginConfig) GetLatestInterval() int64 {
	if m != nil {
		return m.LatestInterval
	}
	return 0
}

func init() {
	proto.RegisterType((*SecretPluginConfig)(nil), "meshapi.security.mist.v1.SecretPluginConfig")
}

func init() { proto.RegisterFile("secret.proto", fileDescriptor_6acf428160d7a216) }

var fileDescriptor_6acf428160d7a216 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd1, 0x4b, 0x6a, 0xe3, 0x30,
	0x1c, 0xc7, 0x71, 0x3c, 0x99, 0xbc, 0xfe, 0x71, 0x1e, 0x68, 0x60, 0xd0, 0x2c, 0x26, 0x93, 0x79,
	0x30, 0xe3, 0xc5, 0x60, 0x28, 0xbd, 0x41, 0xb3, 0xea, 0xa2, 0x25, 0x38, 0x74, 0xd3, 0x8d, 0x51,
	0x9c, 0x7f, 0x13, 0x81, 0x2c, 0x09, 0x49, 0x0e, 0x49, 0x4e, 0xd6, 0x23, 0x74, 0xd9, 0x23, 0x94,
	0x9c, 0xa4, 0x58, 0x72, 0x68, 0x96, 0xfa, 0xe8, 0xeb, 0x9f, 0x31, 0x86, 0xd8, 0x62, 0x61, 0xd0,
	0xa5, 0xda, 0x28, 0xa7, 0x08, 0x2d, 0xd1, 0x6e, 0x99, 0xe6, 0xa9, 0xc5, 0xa2, 0x32, 0xdc, 0x1d,
	0xd2, 0x92, 0x5b, 0x97, 0xee, 0xae, 0x7e, 0x3d, 0xb7, 0x80, 0x2c, 0x7d, 0xba, 0x10, 0xd5, 0x86,
	0xcb, 0xb9, 0x92, 0x4f, 0x7c, 0x43, 0xbe, 0x41, 0x8f, 0x69, 0x9d, 0x4b, 0x56, 0x22, 0x8d, 0x66,
	0x51, 0xd2, 0xcf, 0xba, 0x4c, 0xeb, 0x7b, 0x56, 0x22, 0xf9, 0x0a, 0x1d, 0x94, 0x6c, 0x25, 0x90,
	0x7e, 0x9a, 0x45, 0x49, 0x2f, 0x6b, 0x4e, 0x84, 0x42, 0x77, 0x87, 0xc6, 0x72, 0x25, 0x69, 0x2b,
	0x3c, 0xd1, 0x1c, 0xc9, 0x77, 0x00, 0x83, 0x5a, 0x19, 0x97, 0x57, 0x46, 0xd0, 0xcf, 0xfe, 0xb2,
	0x1f, 0xe4, 0xc1, 0x08, 0xf2, 0x13, 0x62, 0xa1, 0x0a, 0x26, 0xf2, 0x40, 0xb4, 0xed, 0x67, 0x07,
	0xde, 0x32, 0x4f, 0xe4, 0x07, 0x0c, 0xb8, 0xe4, 0x2e, 0xd7, 0x68, 0xb8, 0x5a, 0xd3, 0xce, 0x2c,
	0x4a, 0x5a, 0x19, 0xd4, 0xb4, 0xf0, 0x42, 0x12, 0x98, 0xf8, 0xc0, 0xa0, 0x33, 0x87, 0xbc, 0x50,
	0x95, 0x74, 0xb4, 0xeb, 0xab, 0x51, 0xed, 0x59, 0xcd, 0xf3, 0x5a, 0xc9, 0x6f, 0x18, 0x56, 0x7a,
	0xcd, 0x1c, 0x9e, 0xc7, 0x7a, 0x3e, 0x8b, 0x03, 0x36, 0x73, 0xff, 0x81, 0x34, 0xd1, 0xe5, 0x60,
	0xdf, 0x97, 0x93, 0x70, 0x73, 0x31, 0xf9, 0x17, 0xc6, 0x05, 0x2b, 0xb6, 0x98, 0x97, 0x6c, 0xdf,
	0xa4, 0xe0, 0xd3, 0xa1, 0xe7, 0x3b, 0xb6, 0x0f, 0xdd, 0x1f, 0x18, 0x7d, 0x74, 0x96, 0x1f, 0x91,
	0x0e, 0xc2, 0xbb, 0xcf, 0xd9, 0x92, 0x1f, 0x91, 0xfc, 0x83, 0xb1, 0x60, 0x0e, 0xad, 0xcb, 0xb9,
	0x74, 0x68, 0x76, 0x4c, 0xd0, 0x38, 0x7c, 0x49, 0xe0, 0xdb, 0x46, 0x6f, 0xbe, 0xbc, 0x9c, 0xa6,
	0xd1, 0xeb, 0x69, 0x1a, 0xbd, 0x9d, 0xa6, 0xd1, 0x63, 0xdb, 0x1d, 0x34, 0xda, 0x55, 0xc7, 0xff,
	0xf0, 0xeb, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x41, 0x15, 0x26, 0x00, 0x02, 0x00, 0x00,
}

func (m *SecretPluginConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretPluginConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretPluginConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LatestInterval != 0 {
		i = encodeVarintSecret(dAtA, i, uint64(m.LatestInterval))
		i--
		dAtA[i] = 0x60
	}
	if m.CacheMaxSize != 0 {
		i = encodeVarintSecret(dAtA, i, uint64(m.CacheMaxSize))
		i--
		dAtA[i] = 0x58
	}
	if m.CacheMaxCount != 0 {
		i = encodeVarintSecret(dAtA, i, uint64(m.CacheMaxCount))
		i--
		dAtA[i] = 0x50
	}
	if m.UpdateRetryCount != 0 {
		i = encodeVarintSecret(dAtA, i, uint64(m.UpdateRetryCount))
		i--
		dAtA[i] = 0x48
	}
	if m.UpdatePeriod != 0 {
		i = encodeVarintSecret(dAtA, i, uint64(m.UpdatePeriod))
		i--
		dAtA[i] = 0x40
	}
	if m.InitRetryCount != 0 {
		i = encodeVarintSecret(dAtA, i, uint64(m.InitRetryCount))
		i--
		dAtA[i] = 0x38
	}
	if m.InitPeriod != 0 {
		i = encodeVarintSecret(dAtA, i, uint64(m.InitPeriod))
		i--
		dAtA[i] = 0x30
	}
	if m.LocalReport {
		i--
		if m.LocalReport {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ReportUrl) > 0 {
		i -= len(m.ReportUrl)
		copy(dAtA[i:], m.ReportUrl)
		i = encodeVarintSecret(dAtA, i, uint64(len(m.ReportUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintSecret(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintSecret(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSecret(dAtA []byte, offset int, v uint64) int {
	offset -= sovSecret(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecretPluginConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovSecret(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovSecret(uint64(l))
	}
	l = len(m.ReportUrl)
	if l > 0 {
		n += 1 + l + sovSecret(uint64(l))
	}
	if m.LocalReport {
		n += 2
	}
	if m.InitPeriod != 0 {
		n += 1 + sovSecret(uint64(m.InitPeriod))
	}
	if m.InitRetryCount != 0 {
		n += 1 + sovSecret(uint64(m.InitRetryCount))
	}
	if m.UpdatePeriod != 0 {
		n += 1 + sovSecret(uint64(m.UpdatePeriod))
	}
	if m.UpdateRetryCount != 0 {
		n += 1 + sovSecret(uint64(m.UpdateRetryCount))
	}
	if m.CacheMaxCount != 0 {
		n += 1 + sovSecret(uint64(m.CacheMaxCount))
	}
	if m.CacheMaxSize != 0 {
		n += 1 + sovSecret(uint64(m.CacheMaxSize))
	}
	if m.LatestInterval != 0 {
		n += 1 + sovSecret(uint64(m.LatestInterval))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSecret(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSecret(x uint64) (n int) {
	return sovSecret(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecretPluginConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecret
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretPluginConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretPluginConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecret
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecret
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecret
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecret
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecret
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecret
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalReport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LocalReport = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPeriod", wireType)
			}
			m.InitPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitRetryCount", wireType)
			}
			m.InitRetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitRetryCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePeriod", wireType)
			}
			m.UpdatePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatePeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateRetryCount", wireType)
			}
			m.UpdateRetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateRetryCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheMaxCount", wireType)
			}
			m.CacheMaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheMaxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheMaxSize", wireType)
			}
			m.CacheMaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheMaxSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestInterval", wireType)
			}
			m.LatestInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecret(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecret
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecret
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecret(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecret
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecret
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSecret
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSecret
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSecret
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSecret        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecret          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSecret = fmt.Errorf("proto: unexpected end of group")
)
