// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mist_sdk.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MISTSdkConfig struct {
	// appname
	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// mist master flag
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	// version
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// issue identity config
	Issue *Issue `protobuf:"bytes,4,opt,name=issue,proto3" json:"issue,omitempty"`
	// verify identity config
	Verify               *Verify  `protobuf:"bytes,5,opt,name=verify,proto3" json:"verify,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MISTSdkConfig) Reset()         { *m = MISTSdkConfig{} }
func (m *MISTSdkConfig) String() string { return proto.CompactTextString(m) }
func (*MISTSdkConfig) ProtoMessage()    {}
func (*MISTSdkConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe07c5398a3e9561, []int{0}
}
func (m *MISTSdkConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MISTSdkConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MISTSdkConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MISTSdkConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MISTSdkConfig.Merge(m, src)
}
func (m *MISTSdkConfig) XXX_Size() int {
	return m.Size()
}
func (m *MISTSdkConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MISTSdkConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MISTSdkConfig proto.InternalMessageInfo

func (m *MISTSdkConfig) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *MISTSdkConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *MISTSdkConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MISTSdkConfig) GetIssue() *Issue {
	if m != nil {
		return m.Issue
	}
	return nil
}

func (m *MISTSdkConfig) GetVerify() *Verify {
	if m != nil {
		return m.Verify
	}
	return nil
}

type Issue struct {
	// mist issue url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// svid cache interval
	CacheInterval        int64    `protobuf:"varint,2,opt,name=cache_interval,json=cacheInterval,proto3" json:"cache_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Issue) Reset()         { *m = Issue{} }
func (m *Issue) String() string { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()    {}
func (*Issue) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe07c5398a3e9561, []int{1}
}
func (m *Issue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Issue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Issue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Issue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue.Merge(m, src)
}
func (m *Issue) XXX_Size() int {
	return m.Size()
}
func (m *Issue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue proto.InternalMessageInfo

func (m *Issue) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Issue) GetCacheInterval() int64 {
	if m != nil {
		return m.CacheInterval
	}
	return 0
}

type Verify struct {
	// mist verify url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// mist get certs url
	GetCertsUrl string `protobuf:"bytes,2,opt,name=get_certs_url,json=getCertsUrl,proto3" json:"get_certs_url,omitempty"`
	// max exp time from now
	MaxExpTime int64 `protobuf:"varint,3,opt,name=max_exp_time,json=maxExpTime,proto3" json:"max_exp_time,omitempty"`
	// sync verify
	Sync bool `protobuf:"varint,4,opt,name=sync,proto3" json:"sync,omitempty"`
	// svid cache interval
	SvidCacheInterval int64 `protobuf:"varint,5,opt,name=svid_cache_interval,json=svidCacheInterval,proto3" json:"svid_cache_interval,omitempty"`
	SvidCacheSize     int64 `protobuf:"varint,6,opt,name=svid_cache_size,json=svidCacheSize,proto3" json:"svid_cache_size,omitempty"`
	SvidCacheCap      int64 `protobuf:"varint,7,opt,name=svid_cache_cap,json=svidCacheCap,proto3" json:"svid_cache_cap,omitempty"`
	// cert cache interval
	CertCacheInterval    int64    `protobuf:"varint,8,opt,name=cert_cache_interval,json=certCacheInterval,proto3" json:"cert_cache_interval,omitempty"`
	CertCacheSize        int64    `protobuf:"varint,9,opt,name=cert_cache_size,json=certCacheSize,proto3" json:"cert_cache_size,omitempty"`
	CertCacheCap         int64    `protobuf:"varint,10,opt,name=cert_cache_cap,json=certCacheCap,proto3" json:"cert_cache_cap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Verify) Reset()         { *m = Verify{} }
func (m *Verify) String() string { return proto.CompactTextString(m) }
func (*Verify) ProtoMessage()    {}
func (*Verify) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe07c5398a3e9561, []int{2}
}
func (m *Verify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Verify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Verify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Verify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verify.Merge(m, src)
}
func (m *Verify) XXX_Size() int {
	return m.Size()
}
func (m *Verify) XXX_DiscardUnknown() {
	xxx_messageInfo_Verify.DiscardUnknown(m)
}

var xxx_messageInfo_Verify proto.InternalMessageInfo

func (m *Verify) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Verify) GetGetCertsUrl() string {
	if m != nil {
		return m.GetCertsUrl
	}
	return ""
}

func (m *Verify) GetMaxExpTime() int64 {
	if m != nil {
		return m.MaxExpTime
	}
	return 0
}

func (m *Verify) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func (m *Verify) GetSvidCacheInterval() int64 {
	if m != nil {
		return m.SvidCacheInterval
	}
	return 0
}

func (m *Verify) GetSvidCacheSize() int64 {
	if m != nil {
		return m.SvidCacheSize
	}
	return 0
}

func (m *Verify) GetSvidCacheCap() int64 {
	if m != nil {
		return m.SvidCacheCap
	}
	return 0
}

func (m *Verify) GetCertCacheInterval() int64 {
	if m != nil {
		return m.CertCacheInterval
	}
	return 0
}

func (m *Verify) GetCertCacheSize() int64 {
	if m != nil {
		return m.CertCacheSize
	}
	return 0
}

func (m *Verify) GetCertCacheCap() int64 {
	if m != nil {
		return m.CertCacheCap
	}
	return 0
}

func init() {
	proto.RegisterType((*MISTSdkConfig)(nil), "meshapi.security.mist.v1.MISTSdkConfig")
	proto.RegisterType((*Issue)(nil), "meshapi.security.mist.v1.Issue")
	proto.RegisterType((*Verify)(nil), "meshapi.security.mist.v1.Verify")
}

func init() { proto.RegisterFile("mist_sdk.proto", fileDescriptor_fe07c5398a3e9561) }

var fileDescriptor_fe07c5398a3e9561 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xe5, 0xa4, 0xbb, 0x49, 0xa7, 0x4d, 0x00, 0x57, 0x42, 0xe6, 0x12, 0x56, 0x11, 0xa0,
	0x9c, 0x56, 0x02, 0x84, 0xc4, 0x11, 0xb1, 0xe2, 0x90, 0x03, 0x1c, 0x36, 0x85, 0x03, 0x17, 0xcb,
	0xdd, 0x4c, 0x53, 0xab, 0xf1, 0xc6, 0xb2, 0x9d, 0x55, 0xb6, 0x4f, 0xc8, 0x05, 0x89, 0x47, 0x40,
	0x79, 0x02, 0x1e, 0x01, 0xd9, 0xbb, 0x8d, 0x56, 0x85, 0xdc, 0x3c, 0x33, 0xdf, 0xcc, 0x3f, 0xff,
	0xc8, 0x30, 0x56, 0xd2, 0x3a, 0x6e, 0x97, 0xb7, 0xa9, 0x36, 0x1b, 0xb7, 0xa1, 0x4c, 0xa1, 0xbd,
	0x11, 0x5a, 0xa6, 0x16, 0x8b, 0xad, 0x91, 0xae, 0x4e, 0x3d, 0x90, 0x56, 0xaf, 0xa7, 0x3f, 0x09,
	0x8c, 0x3e, 0xcf, 0x17, 0x97, 0x8b, 0xe5, 0x6d, 0xb6, 0x29, 0xaf, 0xe5, 0x8a, 0x3e, 0x83, 0xa1,
	0xd0, 0x9a, 0x97, 0x42, 0x21, 0x23, 0x09, 0x99, 0x9d, 0xe6, 0x03, 0xa1, 0xf5, 0x17, 0xa1, 0x90,
	0x3e, 0x85, 0x18, 0x4b, 0x71, 0xb5, 0x46, 0xd6, 0x4b, 0xc8, 0x6c, 0x98, 0xb7, 0x11, 0x65, 0x30,
	0xa8, 0xd0, 0x58, 0xb9, 0x29, 0x59, 0xbf, 0xe9, 0x68, 0x43, 0xfa, 0x0e, 0x22, 0x69, 0xed, 0x16,
	0xd9, 0x49, 0x42, 0x66, 0x67, 0x6f, 0x9e, 0xa7, 0xc7, 0x16, 0x49, 0xe7, 0x1e, 0xcb, 0x1b, 0x9a,
	0xbe, 0x87, 0xb8, 0x42, 0x23, 0xaf, 0x6b, 0x16, 0x85, 0xbe, 0xe4, 0x78, 0xdf, 0xb7, 0xc0, 0xe5,
	0x2d, 0x3f, 0xfd, 0x00, 0x51, 0x98, 0x44, 0x1f, 0x43, 0x7f, 0x6b, 0xd6, 0xad, 0x03, 0xff, 0xa4,
	0x2f, 0x61, 0x5c, 0x88, 0xe2, 0x06, 0xb9, 0x2c, 0x1d, 0x9a, 0x4a, 0xac, 0x83, 0x8b, 0x7e, 0x3e,
	0x0a, 0xd9, 0x79, 0x9b, 0x9c, 0xfe, 0xe9, 0x41, 0xdc, 0x0c, 0xfd, 0xcf, 0x8c, 0x29, 0x8c, 0x56,
	0xe8, 0x78, 0x81, 0xc6, 0x59, 0xee, 0x6b, 0xbd, 0x50, 0x3b, 0x5b, 0xa1, 0xcb, 0x7c, 0xee, 0xab,
	0x59, 0xd3, 0x04, 0xce, 0x95, 0xd8, 0x71, 0xdc, 0x69, 0xee, 0xa4, 0xc2, 0x70, 0x92, 0x7e, 0x0e,
	0x4a, 0xec, 0x3e, 0xed, 0xf4, 0xa5, 0x54, 0x48, 0x29, 0x9c, 0xd8, 0xba, 0x2c, 0xc2, 0x51, 0x86,
	0x79, 0x78, 0xd3, 0x14, 0x2e, 0x6c, 0x25, 0x97, 0xfc, 0xc1, 0x8a, 0x51, 0x68, 0x7e, 0xe2, 0x4b,
	0x59, 0x77, 0x4d, 0xfa, 0x0a, 0x1e, 0x75, 0x78, 0x2b, 0xef, 0x90, 0xc5, 0x8d, 0x9d, 0x03, 0xbb,
	0x90, 0x77, 0x48, 0x5f, 0xc0, 0xb8, 0xc3, 0x15, 0x42, 0xb3, 0x41, 0xc0, 0xce, 0x0f, 0x58, 0x26,
	0xb4, 0x57, 0xf7, 0x9e, 0x1e, 0xaa, 0x0f, 0x1b, 0x75, 0x5f, 0xfa, 0x47, 0xbd, 0xc3, 0x07, 0xf5,
	0xd3, 0xf6, 0x98, 0xf7, 0xec, 0xbd, 0x7a, 0x87, 0xf3, 0xea, 0xd0, 0xa8, 0x1f, 0xb0, 0x4c, 0xe8,
	0x8f, 0x17, 0x3f, 0xf6, 0x13, 0xf2, 0x6b, 0x3f, 0x21, 0xbf, 0xf7, 0x13, 0xf2, 0x3d, 0x72, 0xb5,
	0x46, 0x7b, 0x15, 0x87, 0xaf, 0xfb, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x72, 0x8d, 0xe1,
	0x93, 0xcc, 0x02, 0x00, 0x00,
}

func (m *MISTSdkConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MISTSdkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MISTSdkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Verify != nil {
		{
			size, err := m.Verify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMistSdk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Issue != nil {
		{
			size, err := m.Issue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMistSdk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMistSdk(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintMistSdk(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Issue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Issue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Issue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CacheInterval != 0 {
		i = encodeVarintMistSdk(dAtA, i, uint64(m.CacheInterval))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMistSdk(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Verify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Verify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Verify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CertCacheCap != 0 {
		i = encodeVarintMistSdk(dAtA, i, uint64(m.CertCacheCap))
		i--
		dAtA[i] = 0x50
	}
	if m.CertCacheSize != 0 {
		i = encodeVarintMistSdk(dAtA, i, uint64(m.CertCacheSize))
		i--
		dAtA[i] = 0x48
	}
	if m.CertCacheInterval != 0 {
		i = encodeVarintMistSdk(dAtA, i, uint64(m.CertCacheInterval))
		i--
		dAtA[i] = 0x40
	}
	if m.SvidCacheCap != 0 {
		i = encodeVarintMistSdk(dAtA, i, uint64(m.SvidCacheCap))
		i--
		dAtA[i] = 0x38
	}
	if m.SvidCacheSize != 0 {
		i = encodeVarintMistSdk(dAtA, i, uint64(m.SvidCacheSize))
		i--
		dAtA[i] = 0x30
	}
	if m.SvidCacheInterval != 0 {
		i = encodeVarintMistSdk(dAtA, i, uint64(m.SvidCacheInterval))
		i--
		dAtA[i] = 0x28
	}
	if m.Sync {
		i--
		if m.Sync {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MaxExpTime != 0 {
		i = encodeVarintMistSdk(dAtA, i, uint64(m.MaxExpTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GetCertsUrl) > 0 {
		i -= len(m.GetCertsUrl)
		copy(dAtA[i:], m.GetCertsUrl)
		i = encodeVarintMistSdk(dAtA, i, uint64(len(m.GetCertsUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintMistSdk(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMistSdk(dAtA []byte, offset int, v uint64) int {
	offset -= sovMistSdk(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MISTSdkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovMistSdk(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMistSdk(uint64(l))
	}
	if m.Issue != nil {
		l = m.Issue.Size()
		n += 1 + l + sovMistSdk(uint64(l))
	}
	if m.Verify != nil {
		l = m.Verify.Size()
		n += 1 + l + sovMistSdk(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Issue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMistSdk(uint64(l))
	}
	if m.CacheInterval != 0 {
		n += 1 + sovMistSdk(uint64(m.CacheInterval))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Verify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMistSdk(uint64(l))
	}
	l = len(m.GetCertsUrl)
	if l > 0 {
		n += 1 + l + sovMistSdk(uint64(l))
	}
	if m.MaxExpTime != 0 {
		n += 1 + sovMistSdk(uint64(m.MaxExpTime))
	}
	if m.Sync {
		n += 2
	}
	if m.SvidCacheInterval != 0 {
		n += 1 + sovMistSdk(uint64(m.SvidCacheInterval))
	}
	if m.SvidCacheSize != 0 {
		n += 1 + sovMistSdk(uint64(m.SvidCacheSize))
	}
	if m.SvidCacheCap != 0 {
		n += 1 + sovMistSdk(uint64(m.SvidCacheCap))
	}
	if m.CertCacheInterval != 0 {
		n += 1 + sovMistSdk(uint64(m.CertCacheInterval))
	}
	if m.CertCacheSize != 0 {
		n += 1 + sovMistSdk(uint64(m.CertCacheSize))
	}
	if m.CertCacheCap != 0 {
		n += 1 + sovMistSdk(uint64(m.CertCacheCap))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMistSdk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMistSdk(x uint64) (n int) {
	return sovMistSdk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MISTSdkConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMistSdk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MISTSdkConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MISTSdkConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMistSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMistSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMistSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMistSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMistSdk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMistSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issue == nil {
				m.Issue = &Issue{}
			}
			if err := m.Issue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMistSdk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMistSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Verify == nil {
				m.Verify = &Verify{}
			}
			if err := m.Verify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMistSdk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMistSdk
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMistSdk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Issue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMistSdk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Issue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Issue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMistSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMistSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheInterval", wireType)
			}
			m.CacheInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMistSdk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMistSdk
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMistSdk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Verify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMistSdk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Verify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Verify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMistSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMistSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetCertsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMistSdk
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMistSdk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetCertsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxExpTime", wireType)
			}
			m.MaxExpTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxExpTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sync = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvidCacheInterval", wireType)
			}
			m.SvidCacheInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvidCacheInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvidCacheSize", wireType)
			}
			m.SvidCacheSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvidCacheSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvidCacheCap", wireType)
			}
			m.SvidCacheCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SvidCacheCap |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertCacheInterval", wireType)
			}
			m.CertCacheInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertCacheInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertCacheSize", wireType)
			}
			m.CertCacheSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertCacheSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertCacheCap", wireType)
			}
			m.CertCacheCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertCacheCap |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMistSdk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMistSdk
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMistSdk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMistSdk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMistSdk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMistSdk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMistSdk
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMistSdk
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMistSdk
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMistSdk        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMistSdk          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMistSdk = fmt.Errorf("proto: unexpected end of group")
)
