// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: plugin_config.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MISTPluginConfig struct {
	// appname
	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// mist master flag
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	// version
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// bkmi common config
	Bkmi *BKMICommonConfig `protobuf:"bytes,4,opt,name=bkmi,proto3" json:"bkmi,omitempty"`
	// crypto plugin config
	Crypto *CryptoPluginConfig `protobuf:"bytes,5,opt,name=crypto,proto3" json:"crypto,omitempty"`
	// identity plugin config
	Identity *IdentityPluginConfig `protobuf:"bytes,6,opt,name=identity,proto3" json:"identity,omitempty"`
	// secret plugin config
	Secret               *SecretPluginConfig `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *MISTPluginConfig) Reset()         { *m = MISTPluginConfig{} }
func (m *MISTPluginConfig) String() string { return proto.CompactTextString(m) }
func (*MISTPluginConfig) ProtoMessage()    {}
func (*MISTPluginConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_27015a21da154575, []int{0}
}
func (m *MISTPluginConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MISTPluginConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MISTPluginConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MISTPluginConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MISTPluginConfig.Merge(m, src)
}
func (m *MISTPluginConfig) XXX_Size() int {
	return m.Size()
}
func (m *MISTPluginConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MISTPluginConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MISTPluginConfig proto.InternalMessageInfo

func (m *MISTPluginConfig) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *MISTPluginConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *MISTPluginConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MISTPluginConfig) GetBkmi() *BKMICommonConfig {
	if m != nil {
		return m.Bkmi
	}
	return nil
}

func (m *MISTPluginConfig) GetCrypto() *CryptoPluginConfig {
	if m != nil {
		return m.Crypto
	}
	return nil
}

func (m *MISTPluginConfig) GetIdentity() *IdentityPluginConfig {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *MISTPluginConfig) GetSecret() *SecretPluginConfig {
	if m != nil {
		return m.Secret
	}
	return nil
}

func init() {
	proto.RegisterType((*MISTPluginConfig)(nil), "meshapi.security.mist.v1.MISTPluginConfig")
}

func init() { proto.RegisterFile("plugin_config.proto", fileDescriptor_27015a21da154575) }

var fileDescriptor_27015a21da154575 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcf, 0x4a, 0x33, 0x31,
	0x14, 0xc5, 0x49, 0xbf, 0x76, 0xda, 0x2f, 0x8a, 0x48, 0x0a, 0x12, 0xbb, 0x28, 0x83, 0xab, 0x41,
	0x24, 0xa0, 0xee, 0x5d, 0x74, 0xdc, 0x8c, 0x52, 0x91, 0xa9, 0x2b, 0x37, 0x25, 0x33, 0xc6, 0x1a,
	0x6c, 0xfe, 0x30, 0x49, 0x0b, 0xf3, 0x86, 0x2e, 0x7d, 0x04, 0x99, 0x97, 0x70, 0x2b, 0x93, 0x44,
	0xb1, 0x8b, 0xc1, 0xe5, 0x21, 0xe7, 0x9c, 0xfb, 0xbb, 0x37, 0x70, 0xac, 0xd7, 0x9b, 0x15, 0x97,
	0xcb, 0x52, 0xc9, 0x67, 0xbe, 0x22, 0xba, 0x52, 0x56, 0x21, 0x2c, 0x98, 0x79, 0xa1, 0x9a, 0x13,
	0xc3, 0xca, 0x4d, 0xc5, 0x6d, 0x4d, 0x04, 0x37, 0x96, 0x6c, 0xcf, 0x27, 0xb0, 0x78, 0x15, 0xdc,
	0xbb, 0x26, 0xfb, 0x65, 0x55, 0x6b, 0xab, 0x82, 0x3a, 0xe0, 0x4f, 0x4c, 0xda, 0xd6, 0x1b, 0x5e,
	0x0d, 0x2b, 0x2b, 0x66, 0xbd, 0x3a, 0xf9, 0xec, 0xc1, 0xc3, 0x79, 0xb6, 0x78, 0xb8, 0x77, 0xd3,
	0x52, 0x37, 0x0c, 0x1d, 0xc3, 0x11, 0xd5, 0x7a, 0x29, 0xa9, 0x60, 0x18, 0xc4, 0x20, 0xf9, 0x9f,
	0x0f, 0xa9, 0xd6, 0x77, 0x54, 0x30, 0x74, 0x04, 0x23, 0x26, 0x69, 0xb1, 0x66, 0xb8, 0x17, 0x83,
	0x64, 0x94, 0x07, 0x85, 0x30, 0x1c, 0x6e, 0x59, 0x65, 0xb8, 0x92, 0xf8, 0x9f, 0x4f, 0x04, 0x89,
	0xae, 0x60, 0xbf, 0x65, 0xc3, 0xfd, 0x18, 0x24, 0x7b, 0x17, 0xa7, 0xa4, 0x6b, 0x05, 0x32, 0xbb,
	0x9d, 0x67, 0xa9, 0x12, 0x42, 0x05, 0x8c, 0xdc, 0xe5, 0xd0, 0x35, 0x8c, 0xfc, 0x3e, 0x78, 0xe0,
	0x1a, 0xce, 0xba, 0x1b, 0x52, 0xe7, 0xfb, 0xbd, 0x4a, 0x1e, 0xb2, 0xe8, 0x06, 0x8e, 0xbe, 0xef,
	0x80, 0x23, 0xd7, 0x43, 0xba, 0x7b, 0xb2, 0xe0, 0xdc, 0x69, 0xfa, 0xc9, 0xb7, 0x44, 0xfe, 0x86,
	0x78, 0xf8, 0x17, 0xd1, 0xc2, 0xf9, 0x76, 0x89, 0x7c, 0x76, 0x36, 0x7e, 0x6b, 0xa6, 0xe0, 0xbd,
	0x99, 0x82, 0x8f, 0x66, 0x0a, 0x1e, 0x07, 0xb6, 0xd6, 0xcc, 0x14, 0x91, 0xfb, 0x95, 0xcb, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xd0, 0x95, 0x74, 0xfe, 0x01, 0x00, 0x00,
}

func (m *MISTPluginConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MISTPluginConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MISTPluginConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Secret != nil {
		{
			size, err := m.Secret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPluginConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Identity != nil {
		{
			size, err := m.Identity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPluginConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Crypto != nil {
		{
			size, err := m.Crypto.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPluginConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Bkmi != nil {
		{
			size, err := m.Bkmi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPluginConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintPluginConfig(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintPluginConfig(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPluginConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovPluginConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MISTPluginConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovPluginConfig(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPluginConfig(uint64(l))
	}
	if m.Bkmi != nil {
		l = m.Bkmi.Size()
		n += 1 + l + sovPluginConfig(uint64(l))
	}
	if m.Crypto != nil {
		l = m.Crypto.Size()
		n += 1 + l + sovPluginConfig(uint64(l))
	}
	if m.Identity != nil {
		l = m.Identity.Size()
		n += 1 + l + sovPluginConfig(uint64(l))
	}
	if m.Secret != nil {
		l = m.Secret.Size()
		n += 1 + l + sovPluginConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPluginConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPluginConfig(x uint64) (n int) {
	return sovPluginConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MISTPluginConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPluginConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MISTPluginConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MISTPluginConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPluginConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPluginConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPluginConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPluginConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPluginConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPluginConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPluginConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bkmi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPluginConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPluginConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPluginConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bkmi == nil {
				m.Bkmi = &BKMICommonConfig{}
			}
			if err := m.Bkmi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crypto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPluginConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPluginConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPluginConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Crypto == nil {
				m.Crypto = &CryptoPluginConfig{}
			}
			if err := m.Crypto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPluginConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPluginConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPluginConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identity == nil {
				m.Identity = &IdentityPluginConfig{}
			}
			if err := m.Identity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPluginConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPluginConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPluginConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secret == nil {
				m.Secret = &SecretPluginConfig{}
			}
			if err := m.Secret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPluginConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPluginConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPluginConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPluginConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPluginConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPluginConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPluginConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPluginConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPluginConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPluginConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPluginConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPluginConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPluginConfig = fmt.Errorf("proto: unexpected end of group")
)
