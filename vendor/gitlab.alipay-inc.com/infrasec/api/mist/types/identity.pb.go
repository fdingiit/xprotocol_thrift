// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: identity.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IdentityPluginConfig struct {
	// appname
	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// mist master flag
	Enable bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	// version
	Version              string          `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	JwtSvidConf          *JWTSVIDConf    `protobuf:"bytes,4,opt,name=jwt_svid_conf,json=jwtSvidConf,proto3" json:"jwt_svid_conf,omitempty"`
	Selectors            []*SelectorConf `protobuf:"bytes,5,rep,name=selectors,proto3" json:"selectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IdentityPluginConfig) Reset()         { *m = IdentityPluginConfig{} }
func (m *IdentityPluginConfig) String() string { return proto.CompactTextString(m) }
func (*IdentityPluginConfig) ProtoMessage()    {}
func (*IdentityPluginConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_61c7956abb761639, []int{0}
}
func (m *IdentityPluginConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityPluginConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityPluginConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentityPluginConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityPluginConfig.Merge(m, src)
}
func (m *IdentityPluginConfig) XXX_Size() int {
	return m.Size()
}
func (m *IdentityPluginConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityPluginConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityPluginConfig proto.InternalMessageInfo

func (m *IdentityPluginConfig) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *IdentityPluginConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *IdentityPluginConfig) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *IdentityPluginConfig) GetJwtSvidConf() *JWTSVIDConf {
	if m != nil {
		return m.JwtSvidConf
	}
	return nil
}

func (m *IdentityPluginConfig) GetSelectors() []*SelectorConf {
	if m != nil {
		return m.Selectors
	}
	return nil
}

// JWT SVID (SPIFFE Verifiable Identity Document) configuration
type JWTSVIDConf struct {
	// The expiration of jwt svid in second
	Expiration int64 `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// The Algorithm ID
	AlgId                string   `protobuf:"bytes,2,opt,name=alg_id,json=algId,proto3" json:"alg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTSVIDConf) Reset()         { *m = JWTSVIDConf{} }
func (m *JWTSVIDConf) String() string { return proto.CompactTextString(m) }
func (*JWTSVIDConf) ProtoMessage()    {}
func (*JWTSVIDConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_61c7956abb761639, []int{1}
}
func (m *JWTSVIDConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWTSVIDConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JWTSVIDConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JWTSVIDConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTSVIDConf.Merge(m, src)
}
func (m *JWTSVIDConf) XXX_Size() int {
	return m.Size()
}
func (m *JWTSVIDConf) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTSVIDConf.DiscardUnknown(m)
}

var xxx_messageInfo_JWTSVIDConf proto.InternalMessageInfo

func (m *JWTSVIDConf) GetExpiration() int64 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *JWTSVIDConf) GetAlgId() string {
	if m != nil {
		return m.AlgId
	}
	return ""
}

// SelectorConf describe how to fetch specific attribute of pod
type SelectorConf struct {
	// The pod's attribute name which will be filled in SPIFFE ID.
	// Exp: appname, zone...
	Attribute string `protobuf:"bytes,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// Types that are valid to be assigned to Selector:
	//	*SelectorConf_DownwardApiSelector
	//	*SelectorConf_EnvVarSelector
	Selector             isSelectorConf_Selector `protobuf_oneof:"selector"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SelectorConf) Reset()         { *m = SelectorConf{} }
func (m *SelectorConf) String() string { return proto.CompactTextString(m) }
func (*SelectorConf) ProtoMessage()    {}
func (*SelectorConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_61c7956abb761639, []int{2}
}
func (m *SelectorConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectorConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectorConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectorConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectorConf.Merge(m, src)
}
func (m *SelectorConf) XXX_Size() int {
	return m.Size()
}
func (m *SelectorConf) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectorConf.DiscardUnknown(m)
}

var xxx_messageInfo_SelectorConf proto.InternalMessageInfo

type isSelectorConf_Selector interface {
	isSelectorConf_Selector()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SelectorConf_DownwardApiSelector struct {
	DownwardApiSelector *DownwardAPISelectorConf `protobuf:"bytes,2,opt,name=downward_api_selector,json=downwardApiSelector,proto3,oneof" json:"downward_api_selector,omitempty"`
}
type SelectorConf_EnvVarSelector struct {
	EnvVarSelector *EnvVarSelectorConf `protobuf:"bytes,3,opt,name=env_var_selector,json=envVarSelector,proto3,oneof" json:"env_var_selector,omitempty"`
}

func (*SelectorConf_DownwardApiSelector) isSelectorConf_Selector() {}
func (*SelectorConf_EnvVarSelector) isSelectorConf_Selector()      {}

func (m *SelectorConf) GetSelector() isSelectorConf_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *SelectorConf) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *SelectorConf) GetDownwardApiSelector() *DownwardAPISelectorConf {
	if x, ok := m.GetSelector().(*SelectorConf_DownwardApiSelector); ok {
		return x.DownwardApiSelector
	}
	return nil
}

func (m *SelectorConf) GetEnvVarSelector() *EnvVarSelectorConf {
	if x, ok := m.GetSelector().(*SelectorConf_EnvVarSelector); ok {
		return x.EnvVarSelector
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SelectorConf) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SelectorConf_DownwardApiSelector)(nil),
		(*SelectorConf_EnvVarSelector)(nil),
	}
}

// The DownwardAPISelectorConf describe how to fetch specific attribute of pod based on downward api feature
// downward api: https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/
type DownwardAPISelectorConf struct {
	// The path of downward api resource which contains this attribute.
	// Exp: /etc/labels
	DownwardApiPath string `protobuf:"bytes,1,opt,name=downward_api_path,json=downwardApiPath,proto3" json:"downward_api_path,omitempty"`
	// The filed name in downward api resource indicated in `downward_api_path`,
	// which is exactly the value of pod's attribute.
	// Exp: sigma.ali/app-name
	DownwardApiField     string   `protobuf:"bytes,2,opt,name=downward_api_field,json=downwardApiField,proto3" json:"downward_api_field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownwardAPISelectorConf) Reset()         { *m = DownwardAPISelectorConf{} }
func (m *DownwardAPISelectorConf) String() string { return proto.CompactTextString(m) }
func (*DownwardAPISelectorConf) ProtoMessage()    {}
func (*DownwardAPISelectorConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_61c7956abb761639, []int{3}
}
func (m *DownwardAPISelectorConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownwardAPISelectorConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownwardAPISelectorConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownwardAPISelectorConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownwardAPISelectorConf.Merge(m, src)
}
func (m *DownwardAPISelectorConf) XXX_Size() int {
	return m.Size()
}
func (m *DownwardAPISelectorConf) XXX_DiscardUnknown() {
	xxx_messageInfo_DownwardAPISelectorConf.DiscardUnknown(m)
}

var xxx_messageInfo_DownwardAPISelectorConf proto.InternalMessageInfo

func (m *DownwardAPISelectorConf) GetDownwardApiPath() string {
	if m != nil {
		return m.DownwardApiPath
	}
	return ""
}

func (m *DownwardAPISelectorConf) GetDownwardApiField() string {
	if m != nil {
		return m.DownwardApiField
	}
	return ""
}

// The EnvVarSelectorConf describe how to fetch specific attribute of pod based on environment variables
type EnvVarSelectorConf struct {
	// The name of environment variable
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvVarSelectorConf) Reset()         { *m = EnvVarSelectorConf{} }
func (m *EnvVarSelectorConf) String() string { return proto.CompactTextString(m) }
func (*EnvVarSelectorConf) ProtoMessage()    {}
func (*EnvVarSelectorConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_61c7956abb761639, []int{4}
}
func (m *EnvVarSelectorConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnvVarSelectorConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnvVarSelectorConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnvVarSelectorConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvVarSelectorConf.Merge(m, src)
}
func (m *EnvVarSelectorConf) XXX_Size() int {
	return m.Size()
}
func (m *EnvVarSelectorConf) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvVarSelectorConf.DiscardUnknown(m)
}

var xxx_messageInfo_EnvVarSelectorConf proto.InternalMessageInfo

func (m *EnvVarSelectorConf) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*IdentityPluginConfig)(nil), "meshapi.security.mist.v1.IdentityPluginConfig")
	proto.RegisterType((*JWTSVIDConf)(nil), "meshapi.security.mist.v1.JWTSVIDConf")
	proto.RegisterType((*SelectorConf)(nil), "meshapi.security.mist.v1.SelectorConf")
	proto.RegisterType((*DownwardAPISelectorConf)(nil), "meshapi.security.mist.v1.DownwardAPISelectorConf")
	proto.RegisterType((*EnvVarSelectorConf)(nil), "meshapi.security.mist.v1.EnvVarSelectorConf")
}

func init() { proto.RegisterFile("identity.proto", fileDescriptor_61c7956abb761639) }

var fileDescriptor_61c7956abb761639 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0x76, 0xec, 0xb6, 0xdb, 0x9e, 0xe8, 0xba, 0x9e, 0x75, 0x35, 0x82, 0x94, 0x12, 0x50, 0x82,
	0x2c, 0x81, 0xad, 0x4f, 0xb0, 0x6b, 0x15, 0xe3, 0x85, 0x94, 0x54, 0x56, 0xf1, 0x26, 0x4c, 0x9b,
	0x69, 0x3a, 0x4b, 0x3a, 0x19, 0x66, 0xa6, 0x89, 0x7d, 0x43, 0x2f, 0x7d, 0x04, 0xe9, 0x33, 0x78,
	0xe7, 0x8d, 0x24, 0x26, 0x34, 0x75, 0xc9, 0x5d, 0xce, 0x97, 0xef, 0x7c, 0x3f, 0x87, 0x04, 0x4e,
	0x78, 0xc4, 0x84, 0xe1, 0x66, 0xeb, 0x49, 0x95, 0x9a, 0x14, 0xed, 0x35, 0xd3, 0x2b, 0x2a, 0xb9,
	0xa7, 0xd9, 0x62, 0xa3, 0x0a, 0x7c, 0xcd, 0xb5, 0xf1, 0xb2, 0x4b, 0xe7, 0x37, 0x81, 0x27, 0x7e,
	0x45, 0x9e, 0x26, 0x9b, 0x98, 0x8b, 0xb7, 0xa9, 0x58, 0xf2, 0x18, 0x9f, 0x43, 0x9f, 0x4a, 0x19,
	0x0a, 0xba, 0x66, 0x36, 0x19, 0x11, 0x77, 0x10, 0x1c, 0x53, 0x29, 0x3f, 0xd1, 0x35, 0xc3, 0xa7,
	0xd0, 0x63, 0x82, 0xce, 0x13, 0x66, 0xdf, 0x1f, 0x11, 0xb7, 0x1f, 0x54, 0x13, 0xda, 0x70, 0x9c,
	0x31, 0xa5, 0x79, 0x2a, 0xec, 0xce, 0xbf, 0x8d, 0x6a, 0x44, 0x1f, 0x1e, 0xde, 0xe6, 0x26, 0xd4,
	0x19, 0x8f, 0xc2, 0x45, 0x2a, 0x96, 0xf6, 0xd1, 0x88, 0xb8, 0xd6, 0xf8, 0xa5, 0xd7, 0x96, 0xcb,
	0xfb, 0xf8, 0xe5, 0xf3, 0xec, 0xc6, 0x9f, 0x14, 0x61, 0x02, 0xeb, 0x36, 0x37, 0xb3, 0x8c, 0x47,
	0xc5, 0x80, 0x13, 0x18, 0x68, 0x96, 0xb0, 0x85, 0x49, 0x95, 0xb6, 0xbb, 0xa3, 0x8e, 0x6b, 0x8d,
	0x5f, 0xb5, 0xcb, 0xcc, 0x2a, 0x6a, 0xa9, 0xb3, 0x5f, 0x74, 0x26, 0x60, 0x35, 0x1c, 0x70, 0x08,
	0xc0, 0xbe, 0x4b, 0xae, 0xa8, 0x29, 0xc2, 0x17, 0x75, 0x3b, 0x41, 0x03, 0xc1, 0x73, 0xe8, 0xd1,
	0x24, 0x0e, 0x79, 0x54, 0x36, 0x1e, 0x04, 0x5d, 0x9a, 0xc4, 0x7e, 0xe4, 0xfc, 0x21, 0xf0, 0xa0,
	0xe9, 0x80, 0x2f, 0x60, 0x40, 0x8d, 0x51, 0x7c, 0xbe, 0x31, 0xf5, 0xd5, 0xf6, 0x00, 0xc6, 0x70,
	0x1e, 0xa5, 0xb9, 0xc8, 0xa9, 0x8a, 0x42, 0x2a, 0x79, 0x58, 0xc7, 0x29, 0x45, 0xad, 0xf1, 0x65,
	0x7b, 0x8d, 0x49, 0xb5, 0x76, 0x35, 0xf5, 0x9b, 0x7e, 0x1f, 0xee, 0x05, 0x67, 0xb5, 0xe2, 0x95,
	0xe4, 0xf5, 0x2b, 0xfc, 0x0a, 0xa7, 0x4c, 0x64, 0x61, 0x46, 0xd5, 0xde, 0xa3, 0x53, 0x7a, 0x5c,
	0xb4, 0x7b, 0xbc, 0x13, 0xd9, 0x0d, 0x55, 0xff, 0xc9, 0x9f, 0xb0, 0x03, 0xf4, 0x1a, 0xa0, 0x5f,
	0x2b, 0x3a, 0x1a, 0x9e, 0xb5, 0xe4, 0xc2, 0xd7, 0xf0, 0xf8, 0xa0, 0xa9, 0xa4, 0x66, 0x55, 0xdd,
	0xe3, 0x51, 0x23, 0xf0, 0x94, 0x9a, 0x15, 0x5e, 0x00, 0x1e, 0x70, 0x97, 0x9c, 0x25, 0xf5, 0x9d,
	0x4f, 0x1b, 0xe4, 0xf7, 0x05, 0xee, 0xb8, 0x80, 0x77, 0x83, 0x22, 0xc2, 0x51, 0xe3, 0x43, 0x2d,
	0x9f, 0xaf, 0xcf, 0x7e, 0xec, 0x86, 0xe4, 0xe7, 0x6e, 0x48, 0x7e, 0xed, 0x86, 0xe4, 0x5b, 0xd7,
	0x6c, 0x25, 0xd3, 0xf3, 0x5e, 0xf9, 0x3f, 0xbc, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x86, 0xf7,
	0x18, 0x1b, 0x21, 0x03, 0x00, 0x00,
}

func (m *IdentityPluginConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityPluginConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityPluginConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Selectors) > 0 {
		for iNdEx := len(m.Selectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Selectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdentity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.JwtSvidConf != nil {
		{
			size, err := m.JwtSvidConf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdentity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Enable {
		i--
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.AppName) > 0 {
		i -= len(m.AppName)
		copy(dAtA[i:], m.AppName)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.AppName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JWTSVIDConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWTSVIDConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTSVIDConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AlgId) > 0 {
		i -= len(m.AlgId)
		copy(dAtA[i:], m.AlgId)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.AlgId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Expiration != 0 {
		i = encodeVarintIdentity(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectorConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectorConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectorConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Selector != nil {
		{
			size := m.Selector.Size()
			i -= size
			if _, err := m.Selector.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Attribute) > 0 {
		i -= len(m.Attribute)
		copy(dAtA[i:], m.Attribute)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.Attribute)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SelectorConf_DownwardApiSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectorConf_DownwardApiSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownwardApiSelector != nil {
		{
			size, err := m.DownwardApiSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdentity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SelectorConf_EnvVarSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectorConf_EnvVarSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnvVarSelector != nil {
		{
			size, err := m.EnvVarSelector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIdentity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DownwardAPISelectorConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownwardAPISelectorConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownwardAPISelectorConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DownwardApiField) > 0 {
		i -= len(m.DownwardApiField)
		copy(dAtA[i:], m.DownwardApiField)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.DownwardApiField)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DownwardApiPath) > 0 {
		i -= len(m.DownwardApiPath)
		copy(dAtA[i:], m.DownwardApiPath)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.DownwardApiPath)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnvVarSelectorConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnvVarSelectorConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnvVarSelectorConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIdentity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIdentity(dAtA []byte, offset int, v uint64) int {
	offset -= sovIdentity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IdentityPluginConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	if m.JwtSvidConf != nil {
		l = m.JwtSvidConf.Size()
		n += 1 + l + sovIdentity(uint64(l))
	}
	if len(m.Selectors) > 0 {
		for _, e := range m.Selectors {
			l = e.Size()
			n += 1 + l + sovIdentity(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JWTSVIDConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiration != 0 {
		n += 1 + sovIdentity(uint64(m.Expiration))
	}
	l = len(m.AlgId)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectorConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Attribute)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	if m.Selector != nil {
		n += m.Selector.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectorConf_DownwardApiSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownwardApiSelector != nil {
		l = m.DownwardApiSelector.Size()
		n += 1 + l + sovIdentity(uint64(l))
	}
	return n
}
func (m *SelectorConf_EnvVarSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnvVarSelector != nil {
		l = m.EnvVarSelector.Size()
		n += 1 + l + sovIdentity(uint64(l))
	}
	return n
}
func (m *DownwardAPISelectorConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DownwardApiPath)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	l = len(m.DownwardApiField)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EnvVarSelectorConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIdentity(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIdentity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdentity(x uint64) (n int) {
	return sovIdentity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdentityPluginConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityPluginConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityPluginConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtSvidConf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JwtSvidConf == nil {
				m.JwtSvidConf = &JWTSVIDConf{}
			}
			if err := m.JwtSvidConf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selectors = append(m.Selectors, &SelectorConf{})
			if err := m.Selectors[len(m.Selectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWTSVIDConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWTSVIDConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWTSVIDConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectorConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectorConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectorConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownwardApiSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownwardAPISelectorConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &SelectorConf_DownwardApiSelector{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvVarSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnvVarSelectorConf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Selector = &SelectorConf_EnvVarSelector{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownwardAPISelectorConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownwardAPISelectorConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownwardAPISelectorConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownwardApiPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownwardApiPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownwardApiField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownwardApiField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnvVarSelectorConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvVarSelectorConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvVarSelectorConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdentity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIdentity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIdentity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIdentity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIdentity = fmt.Errorf("proto: unexpected end of group")
)
